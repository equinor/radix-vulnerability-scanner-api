package service

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"testing"

	apiErrors "github.com/equinor/radix-vulnerability-scanner-api/api/errors"
	"github.com/equinor/radix-vulnerability-scanner-api/models"
	apiClient "github.com/equinor/radix-vulnerability-scanner-api/radix_api/generated_client/client"
	environmentClient "github.com/equinor/radix-vulnerability-scanner-api/radix_api/generated_client/client/environment"
	clientModels "github.com/equinor/radix-vulnerability-scanner-api/radix_api/generated_client/models"
	environmentClientMock "github.com/equinor/radix-vulnerability-scanner-api/radix_api/mock_client/client/environment"
	serviceModels "github.com/equinor/radix-vulnerability-scanner-api/service/models"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/golang/mock/gomock"
	"github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/suite"
)

type mockRoundTripper struct {
	mock.Mock
}

func (m *mockRoundTripper) RoundTrip(r *http.Request) (*http.Response, error) {
	args := m.Called(r.Header["Authorization"], r.URL.Scheme, r.URL.Host, r.URL.Path)
	return args.Get(0).(*http.Response), args.Error(1)
}

func Test_RadixApiServiceTestSuite(t *testing.T) {
	suite.Run(t, new(radixApiServiceTestSuite))
}

type radixApiServiceTestSuite struct {
	suite.Suite
	envClient *environmentClientMock.MockClientService
}

func (s *radixApiServiceTestSuite) SetupTest() {
	ctrl := gomock.NewController(s.T())
	s.envClient = environmentClientMock.NewMockClientService(ctrl)
}

func (s *radixApiServiceTestSuite) Test_GetEnvironmentSummary() {
	envName := "anyenv"
	apiEnvModel := []*clientModels.EnvironmentSummary{{Name: envName}}
	s.envClient.EXPECT().GetEnvironmentSummary(gomock.Any(), gomock.Any(), gomock.Any()).Return(&environmentClient.GetEnvironmentSummaryOK{Payload: apiEnvModel}, nil)

	sut := s.buildRadixApiService()
	actual, err := sut.GetEnvironmentSummary(context.Background(), "anytoken", "anyapp", envName)
	s.NoError(err)
	expected := &serviceModels.EnvironmentSummary{Name: envName}
	expected.FromRadixApiModel(apiEnvModel[0])
	s.Equal(expected, actual)
}

func (s *radixApiServiceTestSuite) Test_GetEnvironmentSummary_Error() {
	clientErr := errors.New("any err")
	s.envClient.EXPECT().GetEnvironmentSummary(gomock.Any(), gomock.Any(), gomock.Any()).Return(nil, clientErr)

	sut := s.buildRadixApiService()
	actual, err := sut.GetEnvironmentSummary(context.Background(), "anytoken", "anyapp", "anyenv")
	s.ErrorIs(err, clientErr)
	s.Nil(actual)
}

func (s *radixApiServiceTestSuite) Test_GetEnvironmentSummary_NotFoundError() {
	s.envClient.EXPECT().GetEnvironmentSummary(gomock.Any(), gomock.Any(), gomock.Any()).Return(nil, &environmentClient.GetEnvironmentSummaryNotFound{})

	sut := s.buildRadixApiService()
	actual, err := sut.GetEnvironmentSummary(context.Background(), "anytoken", "anyapp", "anyenv")
	s.ErrorIs(err, apiErrors.ErrNotFound)
	s.Nil(actual)
}

func (s *radixApiServiceTestSuite) Test_GetEnvironmentSummary_UnauthorizedError() {
	s.envClient.EXPECT().GetEnvironmentSummary(gomock.Any(), gomock.Any(), gomock.Any()).Return(nil, &environmentClient.GetEnvironmentSummaryUnauthorized{})

	sut := s.buildRadixApiService()
	actual, err := sut.GetEnvironmentSummary(context.Background(), "anytoken", "anyapp", "anyenv")
	s.ErrorIs(err, apiErrors.ErrUnauthorized)
	s.Nil(actual)
}

func (s *radixApiServiceTestSuite) Test_GetEnvironmentSummary_ClientRequest() {
	apiEnv, cluster, dnsZone := "apienv", "anycluster", "example.com"
	appName, envName, token := "anyapp", "anyenv", "anytoken"
	env := &models.Env{APIEnvironment: apiEnv, ClusterName: cluster, DNSZone: dnsZone}
	roundTripper := &mockRoundTripper{}
	roundTripper.On("RoundTrip", []string{"Bearer " + token}, "https", env.GetRadixAPIURL(), fmt.Sprintf("/api/v1/applications/%s/environments", appName)).Return(&http.Response{}, nil)

	sut := NewRadixAPIService(env)
	s.Require().NotPanics(func() {
		sut.(*radixAPIService).client.Transport.(*httptransport.Runtime).Transport = roundTripper
	})
	_, _ = sut.GetEnvironmentSummary(context.Background(), token, appName, envName)
	roundTripper.AssertExpectations(s.T())
}

func (s *radixApiServiceTestSuite) Test_GetEnvironmentSummaries() {
	name, branchMapping := "anyenv", "anybranch"
	apiEnvModel := []*clientModels.EnvironmentSummary{{Name: name, BranchMapping: branchMapping}}
	s.envClient.EXPECT().GetEnvironmentSummary(gomock.Any(), gomock.Any(), gomock.Any()).Return(&environmentClient.GetEnvironmentSummaryOK{Payload: apiEnvModel}, nil)

	sut := s.buildRadixApiService()
	actual, err := sut.GetEnvironmentSummaries(context.Background(), "anytoken", "anyapp")
	s.NoError(err)

	expLen := len(apiEnvModel)
	expected := make([]*serviceModels.EnvironmentSummary, expLen)
	for i := 0; i < expLen; i++ {
		expected[i] = &serviceModels.EnvironmentSummary{}
		expected[i].FromRadixApiModel(apiEnvModel[i])
	}
	s.Equal(expected, actual)
}

func (s *radixApiServiceTestSuite) Test_GetEnvironmentSummaries_EmptyPayload() {
	apiEnvModel := []*clientModels.EnvironmentSummary{}
	s.envClient.EXPECT().GetEnvironmentSummary(gomock.Any(), gomock.Any(), gomock.Any()).Return(&environmentClient.GetEnvironmentSummaryOK{Payload: apiEnvModel}, nil)

	sut := s.buildRadixApiService()
	actual, err := sut.GetEnvironmentSummaries(context.Background(), "anytoken", "anyapp")
	s.NoError(err)
	s.Empty(actual)
}

func (s *radixApiServiceTestSuite) Test_GetEnvironmentSummaries_Error() {
	clientErr := errors.New("any err")
	s.envClient.EXPECT().GetEnvironmentSummary(gomock.Any(), gomock.Any(), gomock.Any()).Return(nil, clientErr)

	sut := s.buildRadixApiService()
	actual, err := sut.GetEnvironmentSummaries(context.Background(), "anytoken", "anyapp")
	s.ErrorIs(err, clientErr)
	s.Nil(actual)
}

func (s *radixApiServiceTestSuite) Test_GetEnvironmentSummaries_NotFoundError() {
	s.envClient.EXPECT().GetEnvironmentSummary(gomock.Any(), gomock.Any(), gomock.Any()).Return(nil, &environmentClient.GetEnvironmentSummaryNotFound{})

	sut := s.buildRadixApiService()
	actual, err := sut.GetEnvironmentSummaries(context.Background(), "anytoken", "anyapp")
	s.ErrorIs(err, apiErrors.ErrNotFound)
	s.Nil(actual)
}

func (s *radixApiServiceTestSuite) Test_GetEnvironmentSummaries_UnauthorizedError() {
	s.envClient.EXPECT().GetEnvironmentSummary(gomock.Any(), gomock.Any(), gomock.Any()).Return(nil, &environmentClient.GetEnvironmentSummaryUnauthorized{})

	sut := s.buildRadixApiService()
	actual, err := sut.GetEnvironmentSummaries(context.Background(), "anytoken", "anyapp")
	s.ErrorIs(err, apiErrors.ErrUnauthorized)
	s.Nil(actual)
}

func (s *radixApiServiceTestSuite) Test_GetEnvironmentSummaries_ClientRequest() {
	apiEnv, cluster, dnsZone := "apienv", "anycluster", "example.com"
	appName, token := "anyapp", "anytoken"
	env := &models.Env{APIEnvironment: apiEnv, ClusterName: cluster, DNSZone: dnsZone}
	roundTripper := &mockRoundTripper{}
	roundTripper.On("RoundTrip", []string{"Bearer " + token}, "https", env.GetRadixAPIURL(), fmt.Sprintf("/api/v1/applications/%s/environments", appName)).Return(&http.Response{}, nil)

	sut := NewRadixAPIService(env)
	s.Require().NotPanics(func() {
		sut.(*radixAPIService).client.Transport.(*httptransport.Runtime).Transport = roundTripper
	})
	_, _ = sut.GetEnvironmentSummaries(context.Background(), token, appName)
	roundTripper.AssertExpectations(s.T())
}

func (s *radixApiServiceTestSuite) buildRadixApiService() *radixAPIService {
	return &radixAPIService{
		client: &apiClient.RadixAPI{Environment: s.envClient},
	}
}
