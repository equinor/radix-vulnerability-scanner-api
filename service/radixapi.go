package service

import (
	"context"

	apiErrors "github.com/equinor/radix-vulnerability-scanner-api/api/errors"
	"github.com/equinor/radix-vulnerability-scanner-api/models"
	apiClient "github.com/equinor/radix-vulnerability-scanner-api/radix_api/generated_client/client"
	"github.com/equinor/radix-vulnerability-scanner-api/radix_api/generated_client/client/environment"
	serviceModels "github.com/equinor/radix-vulnerability-scanner-api/service/models"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// RadixAPIService interface
type RadixAPIService interface {
	GetEnvironment(ctx context.Context, token, appName, envName string) (*serviceModels.Environment, error)
	GetEnvironmentSummaries(ctx context.Context, token, appName string) ([]*serviceModels.EnvironmentSummary, error)
}

// radixAPIClientStruct instance variables
type radixAPIService struct {
	client *apiClient.RadixAPI
	env    *models.Env
}

// NewRadixAPIClient constructor
func NewRadixAPIService(env *models.Env) RadixAPIService {
	transport := getRadixApiTransport(env)

	return &radixAPIService{
		client: apiClient.New(transport, strfmt.Default),
		env:    env,
	}
}

func (c *radixAPIService) GetEnvironment(ctx context.Context, token, appName, envName string) (*serviceModels.Environment, error) {
	resp, err := c.client.Environment.GetEnvironment(
		environment.NewGetEnvironmentParams().WithAppName(appName).WithEnvName(envName),
		httptransport.BearerToken(token),
	)

	if err != nil {
		switch err.(type) {
		case *environment.GetEnvironmentNotFound:
			return nil, apiErrors.WrapError(err, apiErrors.ErrNotFound)
		case *environment.GetEnvironmentUnauthorized:
			return nil, apiErrors.WrapError(err, apiErrors.ErrUnauthorized)
		default:
			return nil, err
		}
	}

	env := &serviceModels.Environment{}
	if resp.Payload == nil {
		return env, nil
	}

	env.FromRadixApiModel(resp.Payload)
	return env, nil
}

func (c *radixAPIService) GetEnvironmentSummaries(ctx context.Context, token, appName string) ([]*serviceModels.EnvironmentSummary, error) {
	resp, err := c.client.Environment.GetEnvironmentSummary(
		environment.NewGetEnvironmentSummaryParams().WithAppName(appName),
		httptransport.BearerToken(token),
	)

	if err != nil {
		switch err.(type) {
		case *environment.GetEnvironmentSummaryNotFound:
			return nil, apiErrors.WrapError(err, apiErrors.ErrNotFound)
		case *environment.GetEnvironmentSummaryUnauthorized:
			return nil, apiErrors.WrapError(err, apiErrors.ErrUnauthorized)
		default:
			return nil, err
		}
	}

	payloadLen := len(resp.Payload)
	envSummaries := make([]*serviceModels.EnvironmentSummary, payloadLen)
	for i := 0; i < payloadLen; i++ {
		envSummaries[i] = &serviceModels.EnvironmentSummary{}
		envSummaries[i].FromRadixApiModel(resp.Payload[i])
	}

	return envSummaries, nil
}

func getRadixApiTransport(env *models.Env) *httptransport.Runtime {
	return httptransport.New(env.GetRadixAPIURL(), "/api/v1", env.GetRadixAPISchemes())
}
