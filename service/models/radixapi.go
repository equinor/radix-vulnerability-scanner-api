package models

import (
	radixApiModels "github.com/equinor/radix-vulnerability-scanner-api/radix_api/generated_client/models"
	"github.com/go-openapi/swag"
)

type Component struct {
	Name  string
	Type  string
	Image string
}

func (d *Component) FromRadixApiModel(src *radixApiModels.Component) {
	d.Name = swag.StringValue(src.Name)
	d.Type = swag.StringValue(src.Type)
	d.Image = swag.StringValue(src.Image)
}

type ComponentSummary struct {
	Name  string
	Type  string
	Image string
}

func (d *ComponentSummary) FromRadixApiModel(src *radixApiModels.ComponentSummary) {
	d.Name = swag.StringValue(src.Name)
	d.Type = swag.StringValue(src.Type)
	d.Image = swag.StringValue(src.Image)
}

type Deployment struct {
	Name       string
	Components []Component
}

func (d *Deployment) FromRadixApiModel(src *radixApiModels.Deployment) {
	d.Name = src.Name

	d.Components = nil
	for _, src_c := range src.Components {
		if src_c != nil {
			c := Component{}
			c.FromRadixApiModel(src_c)
			d.Components = append(d.Components, c)
		}
	}
}

type DeploymentSummary struct {
	Name       string
	Components []ComponentSummary
}

func (d *DeploymentSummary) FromRadixApiModel(src *radixApiModels.DeploymentSummary) {
	d.Name = swag.StringValue(src.Name)

	d.Components = nil
	for _, src_c := range src.Components {
		if src_c != nil {
			c := ComponentSummary{}
			c.FromRadixApiModel(src_c)
			d.Components = append(d.Components, c)
		}
	}
}

type EnvironmentSummary struct {
	Name             string
	BranchMapping    string
	ActiveDeployment *DeploymentSummary
}

func (e *EnvironmentSummary) FromRadixApiModel(src *radixApiModels.EnvironmentSummary) {
	e.Name = src.Name
	e.BranchMapping = src.BranchMapping

	e.ActiveDeployment = nil
	if src.ActiveDeployment != nil {
		deploymentSummary := &DeploymentSummary{}
		deploymentSummary.FromRadixApiModel(src.ActiveDeployment)
		e.ActiveDeployment = deploymentSummary
	}
}

// Application instance variables
type Environment struct {
	Name             string
	ActiveDeployment *Deployment
}

func (e *Environment) FromRadixApiModel(src *radixApiModels.Environment) {
	e.Name = src.Name

	e.ActiveDeployment = nil
	if src_d := src.ActiveDeployment; src_d != nil {
		d := &Deployment{}
		d.FromRadixApiModel(src_d)
		e.ActiveDeployment = d
	}
}
