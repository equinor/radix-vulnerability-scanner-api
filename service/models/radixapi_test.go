package models

import (
	"testing"

	"github.com/equinor/radix-vulnerability-scanner-api/radix_api/generated_client/models"
	"github.com/stretchr/testify/assert"
)

func Test_Component_FromRadixApiModel(t *testing.T) {
	stringPtr := func(s string) *string { return &s }
	sut := Component{}
	sut.FromRadixApiModel(&models.Component{Image: stringPtr("anyimg"), Name: stringPtr("anyname"), Type: stringPtr("anytype")})
	assert.Equal(t, Component{Image: "anyimg", Name: "anyname", Type: "anytype"}, sut)
}

func Test_Deployment_FromRadixApiModel(t *testing.T) {
	stringPtr := func(s string) *string { return &s }
	sut := Deployment{}
	sut.FromRadixApiModel(&models.Deployment{Name: "anydeployname", Components: []*models.Component{
		{Image: stringPtr("anyimg1"), Name: stringPtr("anyname1"), Type: stringPtr("anytype1")},
		{Image: stringPtr("anyimg2"), Name: stringPtr("anyname2"), Type: stringPtr("anytype2")},
	}})
	assert.Equal(t, Deployment{Name: "anydeployname", Components: []Component{
		{Image: "anyimg1", Name: "anyname1", Type: "anytype1"},
		{Image: "anyimg2", Name: "anyname2", Type: "anytype2"},
	}}, sut)

}

func Test_Environment_FromRadixApiModel(t *testing.T) {
	stringPtr := func(s string) *string { return &s }

	// No active deployment
	sut := Environment{}
	sut.FromRadixApiModel(&models.Environment{Name: "anyenvname"})
	assert.Equal(t, Environment{Name: "anyenvname"}, sut)

	// With active deployment
	sut = Environment{}
	sut.FromRadixApiModel(&models.Environment{Name: "anyenvname", ActiveDeployment: &models.Deployment{
		Name: "anydeployname", Components: []*models.Component{
			{Image: stringPtr("anyimg1"), Name: stringPtr("anyname1"), Type: stringPtr("anytype1")},
			{Image: stringPtr("anyimg2"), Name: stringPtr("anyname2"), Type: stringPtr("anytype2")},
		},
	}})
	assert.Equal(t, Environment{Name: "anyenvname", ActiveDeployment: &Deployment{
		Name: "anydeployname", Components: []Component{
			{Image: "anyimg1", Name: "anyname1", Type: "anytype1"},
			{Image: "anyimg2", Name: "anyname2", Type: "anytype2"},
		},
	}}, sut)
}
