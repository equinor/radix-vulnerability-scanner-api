package slice

import "sort"

type PredicateFunc[T any] func(obj T) bool
type CompareFunc[T any] func(first, second T) bool

func First[T any](src []T, predicates ...PredicateFunc[T]) (first T, found bool) {
	for _, obj := range src {
		match := true

		for _, predicate := range predicates {
			if match = predicate(obj); !match {
				break
			}
		}

		if match {
			return obj, true
		}
	}

	return
}

func Map[TIn, TOut any](src []TIn, mapper func(obj TIn) TOut) []TOut {
	dst := make([]TOut, 0, len(src))

	for _, obj := range src {
		dst = append(dst, mapper(obj))
	}

	return dst
}

func OrderBy[T any](source []T, compare CompareFunc[T]) []T {
	dst := make([]T, len(source))
	copy(dst, source)
	sort.SliceStable(dst, func(i, j int) bool {
		return compare(dst[i], dst[j])
	})
	return dst
}

// Distinct returns a distinct list of objects based the value returned by keySelector
func Distinct[T any](src []T, keySelector func(item T) any) []T {
	keyMap := make(map[any]struct{})
	dst := make([]T, 0, len(src))

	for _, i := range src {
		key := keySelector(i)
		if _, exist := keyMap[key]; !exist {
			keyMap[key] = struct{}{}
			dst = append(dst, i)
		}
	}

	return dst
}
