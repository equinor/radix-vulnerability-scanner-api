package slice

import (
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_First(t *testing.T) {
	vals := []string{"a", "b", "b1", "b1x", "b3", "c"}

	first, found := First(
		vals,
		func(s string) bool { return strings.HasPrefix(s, "b") },
		func(s string) bool { return len(s) >= 2 },
	)
	assert.Equal(t, "b1", first)
	assert.True(t, found)

	first, found = First(
		vals,
		func(s string) bool { return strings.HasPrefix(s, "b") },
		func(s string) bool { return len(s) >= 1 },
	)
	assert.Equal(t, "b", first)
	assert.True(t, found)

	first, found = First(
		vals,
		func(s string) bool { return strings.HasPrefix(s, "b") },
		func(s string) bool { return len(s) >= 10 },
	)
	assert.Equal(t, "", first)
	assert.False(t, found)

	first, found = First(vals)
	assert.Equal(t, "a", first)
	assert.True(t, found)

	first, found = First([]string{})
	assert.Equal(t, "", first)
	assert.False(t, found)
}

func Test_Map(t *testing.T) {
	type Tin struct {
		Name string
	}

	test_in := []Tin{{Name: "a"}, {Name: "b"}, {Name: "c"}}
	actual_string := Map(test_in, func(obj Tin) string { return obj.Name })
	assert.ElementsMatch(t, []string{"a", "b", "c"}, actual_string)

}

func Test_OrderBy(t *testing.T) {
	chars := []string{"a", "c", "b", "b"}

	sorted := OrderBy(chars, func(first, second string) bool { return second > first })
	assert.Equal(t, []string{"a", "b", "b", "c"}, sorted)
	assert.Equal(t, []string{"a", "c", "b", "b"}, chars)

	assert.NotPanics(t, func() {
		var original []string = nil
		OrderBy(original, func(first, second string) bool { return second > first })
	})
}

func Test_Distinct(t *testing.T) {
	ints := []int{1, 3, 5, 3, 3, 4, 1, 6}

	actualInts := Distinct(ints, func(item int) any { return item })
	assert.ElementsMatch(t, []int{1, 3, 4, 5, 6}, actualInts)

	type baz struct {
		foo string
		bar string
	}
	bazList := []baz{{foo: "foo1", bar: "bar1-1"}, {foo: "foo1", bar: "bar1-2"}, {foo: "foo2", bar: "bar2"}, {foo: "foo3", bar: "bar3"}}
	actualBaz := Distinct(bazList, func(item baz) any { return item.foo })
	assert.ElementsMatch(t, []baz{{foo: "foo1", bar: "bar1-1"}, {foo: "foo2", bar: "bar2"}, {foo: "foo3", bar: "bar3"}}, actualBaz)
}
