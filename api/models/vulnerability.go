package models

import (
	"fmt"
	"time"

	repositoryModels "github.com/equinor/radix-vulnerability-scanner-api/repository/models"
	"github.com/equinor/radix-vulnerability-scanner-api/utils/slice"
)

// EnvironmentVulnerabilities holds vaulnerability scan summaries for components and jobs
type EnvironmentVulnerabilities struct {
	Name       string                   `json:"name"`
	Components ComponentVulnerabilities `json:"components"`
	Jobs       ComponentVulnerabilities `json:"jobs"`
}

// ComponentVulnerabilities defines a map where key is component or job name and value is a summary of vulnerabilities
type ComponentVulnerabilities map[string]ImageWithLastScan

// VulnerabilitySeveritySummary defines a map where key is severity and value is number of vulnerabilities for severity
type VulnerabilitySeveritySummary map[string]int

type Vulnerabilities []Vulnerability

type Image struct {
	ImageName string `json:"image"`
	BaseImage string `json:"baseImage"`
}

type ImageWithLastScan struct {
	Image
	ImageScan
}

type ImageScan struct {
	ScanTime             time.Time                    `json:"scanTime,omitempty"`
	ScanSuccess          bool                         `json:"scanSuccess,omitempty"`
	VulnerabilitySummary VulnerabilitySeveritySummary `json:"vulnerabilitySummary,omitempty"`
	Vulnerabilities      Vulnerabilities              `json:"vulnerabilities,omitempty"`
}

// Vulnerability holds detailed information about a vulnerability
// swagger:model Vulnerability
type Vulnerability struct {
	// Name of the vulnerabile package
	//
	// required: true
	// example: bash
	PackageName string `json:"packageName"`
	// Version of the affected package
	//
	// required: true
	// example: 5.0-4
	Version string `json:"version"`
	// Title of the vulnerability
	//
	// required: false
	// example: bash: when effective UID is not equal to its real UID the saved UID is not dropped
	Title string `json:"title"`
	// A detailed description of the vulnerability
	//
	// required: false
	// example: An issue was discovered in disable_priv_mode in shell.c in GNU Bash through 5.0 patch 11. By default, if Bash is run with its effective UID not equal to its real UID...
	Description string `json:"description"`
	// The severity of the vulnerability
	//
	// required: true
	// Enum: CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN
	// example: HIGH
	Severity string `json:"severity"`
	// The date the vulnerability was published
	//
	// required: false
	// format: date-time
	// example: 2021-03-26T17:15:00Z
	PublishedDate time.Time `json:"publishedDate"`
	// A list of CWEs referencing the vulnerability
	//
	// required: false
	// type: "array"
	// example: ["CWE-273"]
	CWE []string `json:"cwe"`
	// A list of CVEs referencing the vulnerability
	//
	// required: false
	// type: "array"
	// example: ["CVE-2019-18276"]
	CVE []string `json:"cve"`
	// The CVSS value of the vulnerability
	//
	// required: false
	// example: 7.8
	CVSS *float32 `json:"cvss"`
	// A list of URLs with more information about the vulnerability
	//
	// required: false
	// type: "array"
	// example: ["https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-18276","https://github.com/bminor/bash/commit/951bdaad7a18cc0dc1036bba86b18b90874d39ff"]
	References []string `json:"references"`
}

func (m *Vulnerability) FromDto(dto *repositoryModels.VulnerabilityDto) {
	if dto != nil {
		m.PackageName = dto.PackageName
		m.Version = dto.Version
		m.Title = dto.Title
		m.Description = dto.Description
		m.Severity = dto.Severity
		m.PublishedDate = dto.PublicationTime
		m.CVSS = dto.CVSS

		for _, ident := range dto.Identifiers {
			switch ident.IdentifierType {
			case "CVE":
				m.CVE = append(m.CVE, ident.Identifier)
			case "CWE":
				m.CWE = append(m.CWE, ident.Identifier)
			}
		}

		refs := slice.Map(dto.References, func(obj repositoryModels.VulnerabilityReferenceDto) string { return obj.Url })
		refs = append(refs, fmt.Sprintf("https://snyk.io/vuln/%s", dto.ExternalId))
		refs = slice.Distinct(refs, func(item string) any { return item })
		m.References = refs
	}
}
