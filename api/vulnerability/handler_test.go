package vulnerability

import (
	"context"
	"errors"
	"testing"
	"time"

	apiErrors "github.com/equinor/radix-vulnerability-scanner-api/api/errors"
	apiModels "github.com/equinor/radix-vulnerability-scanner-api/api/models"
	commonModel "github.com/equinor/radix-vulnerability-scanner-api/models"
	"github.com/equinor/radix-vulnerability-scanner-api/repository"
	repoMock "github.com/equinor/radix-vulnerability-scanner-api/repository/mock"
	repoModels "github.com/equinor/radix-vulnerability-scanner-api/repository/models"
	radixApiMock "github.com/equinor/radix-vulnerability-scanner-api/service/mock"
	serviceModels "github.com/equinor/radix-vulnerability-scanner-api/service/models"
	"github.com/golang/mock/gomock"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"
)

func Test_NewHandler(t *testing.T) {
	api := &radixApiMock.MockRadixAPIService{}
	repo := &repoMock.MockInterface{}
	expected := &handler{radixapi: api, repo: repo}
	actual := NewHandler(api, repo)
	assert.Equal(t, expected, actual)
}

func Test_HandlerSuite(t *testing.T) {
	suite.Run(t, new(handlerTestSuite))
}

type handlerTestSuite struct {
	suite.Suite
	repo     *repoMock.MockInterface
	radixApi *radixApiMock.MockRadixAPIService
}

func (s *handlerTestSuite) SetupTest() {
	ctrl := gomock.NewController(s.T())
	s.repo = repoMock.NewMockInterface(ctrl)
	s.radixApi = radixApiMock.NewMockRadixAPIService(ctrl)
}

func (s *handlerTestSuite) Test_GetApplicationVulnerabilitySummaries() {
	appName, envName, token := "anyapp", "anyenv", "anytoken"
	radixApiResponseGetEnvironmentSummaries := []*serviceModels.EnvironmentSummary{{
		Name:          envName,
		BranchMapping: "branchMap",
		ActiveDeployment: &serviceModels.DeploymentSummary{Components: []serviceModels.ComponentSummary{
			{Name: "comp1", Type: "component", Image: "comp1image"},
			{Name: "job1", Type: "job", Image: "job1image"},
		}},
	}}

	// Mock Radix API response
	s.radixApi.EXPECT().GetEnvironmentSummaries(gomock.Any(), token, appName).Return(radixApiResponseGetEnvironmentSummaries, nil)

	scanTime1 := time.Now()
	repoResponse := []repoModels.ImageDto{
		{Name: "comp1image", BaseImage: "comp1base", Scans: []repoModels.ImageScanDto{{ScanTime: scanTime1, ScanSuccess: true, VulnerabilityAggregation: []repoModels.ImageScanVulnerabilityAggregation{{Severity: "s1", Count: 10}, {Severity: "s2", Count: 20}}}}},
		{Name: "job1image", BaseImage: "job1base", Scans: []repoModels.ImageScanDto{{ScanTime: scanTime1, ScanSuccess: true, VulnerabilityAggregation: []repoModels.ImageScanVulnerabilityAggregation{{Severity: "s3", Count: 30}, {Severity: "s4", Count: 40}}}}},
	}

	// Mock Repo response
	s.repo.EXPECT().
		GetLastImageScan(
			gomock.Any(),
			gomock.InAnyOrder([]string{"comp1image", "job1image"}),
			repository.GetLastImageScanOptions{IncludeVulnerabilityAggregate: true}).
		Return(repoResponse, nil)

	// Call GetApplicationVulnerabilitySummaries
	sut := &handler{repo: s.repo, radixapi: s.radixApi}
	actual, err := sut.GetApplicationVulnerabilitySummaries(context.Background(), &commonModel.User{RawToken: token}, appName)
	s.NoError(err)

	expected := apiModels.ApplicationVulnerabilities{{
		Name: envName,
		Components: apiModels.ComponentVulnerabilities{
			"comp1": apiModels.ImageWithLastScan{Image: apiModels.Image{ImageName: "comp1image", BaseImage: "comp1base"}, ImageScan: &apiModels.ImageScan{ScanTime: scanTime1, ScanSuccess: true, VulnerabilitySummary: map[string]int{"s1": 10, "s2": 20}, Vulnerabilities: []apiModels.Vulnerability{}}},
		},
		Jobs: apiModels.ComponentVulnerabilities{
			"job1": apiModels.ImageWithLastScan{Image: apiModels.Image{ImageName: "job1image", BaseImage: "job1base"}, ImageScan: &apiModels.ImageScan{ScanTime: scanTime1, ScanSuccess: true, VulnerabilitySummary: map[string]int{"s3": 30, "s4": 40}, Vulnerabilities: []apiModels.Vulnerability{}}},
		},
	}}
	s.Equal(expected, actual)
}

func (s *handlerTestSuite) Test_GetApplicationVulnerabilitySummaries_RadixApiError() {
	appName, token, apiErr := "anyapp", "anytoken", errors.New("anyerror")
	s.radixApi.EXPECT().GetEnvironmentSummaries(gomock.Any(), token, appName).Return(nil, apiErr)

	sut := &handler{repo: s.repo, radixapi: s.radixApi}
	actualVuln, err := sut.GetApplicationVulnerabilitySummaries(context.Background(), &commonModel.User{RawToken: token}, appName)
	s.Nil(actualVuln)
	s.ErrorIs(err, apiErr)
}

func (s *handlerTestSuite) Test_GetEnvironmentVulnerabilitySummary() {
	appName, envName, token := "anyapp", "anyenv", "anytoken"
	radixApiResponse := &serviceModels.Environment{
		Name: "modelEnv",
		ActiveDeployment: &serviceModels.Deployment{
			Components: []serviceModels.Component{
				{Name: "comp1", Type: "component", Image: "comp1image"},
				{Name: "comp2", Type: "component", Image: "comp2image"},
				{Name: "comp3", Type: "component", Image: "comp3image"},
				{Name: "comp4", Type: "component", Image: "comp4image"},
				{Name: "job1", Type: "job", Image: "job1image"},
				{Name: "job2", Type: "job", Image: "job2image"},
				{Name: "any", Type: "unhandled", Image: "any"},
			},
		},
	}
	s.radixApi.EXPECT().GetEnvironment(gomock.Any(), token, appName, envName).Return(radixApiResponse, nil)

	scanTime1, scanTime2 := time.Now(), time.Now().Add(-1*time.Hour)

	repoResponse := []repoModels.ImageDto{
		{Name: "comp1image", BaseImage: "comp1base", Scans: []repoModels.ImageScanDto{{ScanTime: scanTime1, ScanSuccess: true, VulnerabilityAggregation: []repoModels.ImageScanVulnerabilityAggregation{{Severity: "s1", Count: 10}, {Severity: "s2", Count: 20}}}}},
		{Name: "comp2image", BaseImage: "comp2base", Scans: []repoModels.ImageScanDto{{ScanTime: scanTime2, ScanSuccess: false}}},
		{Name: "comp3image", BaseImage: "comp3base"},
		{Name: "job1image", BaseImage: "job1base", Scans: []repoModels.ImageScanDto{{ScanTime: scanTime1, ScanSuccess: true, VulnerabilityAggregation: []repoModels.ImageScanVulnerabilityAggregation{{Severity: "s3", Count: 30}, {Severity: "s4", Count: 40}}}}},
		{Name: "job2image", Scans: []repoModels.ImageScanDto{{ScanTime: scanTime2, ScanSuccess: true}}},
		{Name: "any", Scans: []repoModels.ImageScanDto{{ScanTime: scanTime1, ScanSuccess: true, VulnerabilityAggregation: []repoModels.ImageScanVulnerabilityAggregation{{Severity: "s5", Count: 50}, {Severity: "s6", Count: 60}}}}},
	}
	s.repo.EXPECT().
		GetLastImageScan(
			gomock.Any(),
			gomock.InAnyOrder([]string{"comp1image", "comp2image", "comp3image", "comp4image", "job1image", "job2image", "any"}),
			repository.GetLastImageScanOptions{IncludeVulnerabilityAggregate: true}).
		Return(repoResponse, nil)

	sut := &handler{repo: s.repo, radixapi: s.radixApi}
	actual, err := sut.GetEnvironmentVulnerabilitySummary(context.Background(), &commonModel.User{RawToken: token}, appName, envName)
	s.NoError(err)
	expected := &apiModels.EnvironmentVulnerabilities{
		Name: radixApiResponse.Name,
		Components: apiModels.ComponentVulnerabilities{
			"comp1": apiModels.ImageWithLastScan{Image: apiModels.Image{ImageName: "comp1image", BaseImage: "comp1base"}, ImageScan: &apiModels.ImageScan{ScanTime: scanTime1, ScanSuccess: true, VulnerabilitySummary: map[string]int{"s1": 10, "s2": 20}, Vulnerabilities: []apiModels.Vulnerability{}}},
			"comp2": apiModels.ImageWithLastScan{Image: apiModels.Image{ImageName: "comp2image", BaseImage: "comp2base"}, ImageScan: &apiModels.ImageScan{ScanTime: scanTime2, ScanSuccess: false, VulnerabilitySummary: map[string]int{}, Vulnerabilities: []apiModels.Vulnerability{}}},
			"comp3": apiModels.ImageWithLastScan{Image: apiModels.Image{ImageName: "comp3image", BaseImage: "comp3base"}},
			"comp4": apiModels.ImageWithLastScan{Image: apiModels.Image{ImageName: "comp4image"}},
		},
		Jobs: apiModels.ComponentVulnerabilities{
			"job1": apiModels.ImageWithLastScan{Image: apiModels.Image{ImageName: "job1image", BaseImage: "job1base"}, ImageScan: &apiModels.ImageScan{ScanTime: scanTime1, ScanSuccess: true, VulnerabilitySummary: map[string]int{"s3": 30, "s4": 40}, Vulnerabilities: []apiModels.Vulnerability{}}},
			"job2": apiModels.ImageWithLastScan{Image: apiModels.Image{ImageName: "job2image"}, ImageScan: &apiModels.ImageScan{ScanTime: scanTime2, ScanSuccess: true, VulnerabilitySummary: map[string]int{}, Vulnerabilities: []apiModels.Vulnerability{}}},
		},
	}
	s.Equal(expected, actual)
}

func (s *handlerTestSuite) Test_GetEnvironmentVulnerabilitySummary_RadixApiError() {
	appName, envName, token, apiErr := "anyapp", "anyenv", "anytoken", errors.New("anyerror")
	s.radixApi.EXPECT().GetEnvironment(gomock.Any(), token, appName, envName).Return(nil, apiErr)

	sut := &handler{repo: s.repo, radixapi: s.radixApi}
	actualVuln, err := sut.GetEnvironmentVulnerabilitySummary(context.Background(), &commonModel.User{RawToken: token}, appName, envName)
	s.Nil(actualVuln)
	s.ErrorIs(err, apiErr)
}

func (s *handlerTestSuite) Test_GetEnvironmentVulnerabilitySummary_NoActiveDeployment() {
	appName, envName, token := "anyapp", "anyenv", "anytoken"
	radixApiResponse := &serviceModels.Environment{Name: "modelEnv"}
	s.radixApi.EXPECT().GetEnvironment(gomock.Any(), token, appName, envName).Return(radixApiResponse, nil)

	sut := &handler{repo: s.repo, radixapi: s.radixApi}
	actual, err := sut.GetEnvironmentVulnerabilitySummary(context.Background(), &commonModel.User{RawToken: token}, appName, envName)
	s.NoError(err)
	expected := &apiModels.EnvironmentVulnerabilities{
		Name:       radixApiResponse.Name,
		Components: make(apiModels.ComponentVulnerabilities),
		Jobs:       make(apiModels.ComponentVulnerabilities),
	}
	s.Equal(expected, actual)
}

func (s *handlerTestSuite) Test_GetEnvironmentVulnerabilitySummary_RepositoryError() {
	appName, envName, token, repoErr := "anyapp", "anyenv", "anytoken", errors.New("anyerror")
	radixApiResponse := &serviceModels.Environment{
		Name: "anyname",
		ActiveDeployment: &serviceModels.Deployment{
			Components: []serviceModels.Component{
				{Image: "anyimage"},
			},
		},
	}

	s.radixApi.EXPECT().GetEnvironment(gomock.Any(), token, appName, envName).Return(radixApiResponse, nil)
	s.repo.EXPECT().GetLastImageScan(gomock.Any(), gomock.Any(), gomock.Any()).Return(nil, repoErr)

	sut := &handler{repo: s.repo, radixapi: s.radixApi}
	actualVuln, err := sut.GetEnvironmentVulnerabilitySummary(context.Background(), &commonModel.User{RawToken: token}, appName, envName)
	s.Nil(actualVuln)
	s.ErrorIs(err, repoErr)
}

func (s *handlerTestSuite) Test_GetComponentVulnerabilities_RadixApiError() {
	appName, envName, compName, token, apiErr := "anyapp", "anyenv", "anycomp", "anytoken", errors.New("anyerr")
	s.radixApi.EXPECT().GetEnvironment(gomock.Any(), token, appName, envName).Return(nil, apiErr)

	sut := &handler{repo: s.repo, radixapi: s.radixApi}
	actual, err := sut.GetComponentVulnerabilities(context.Background(), &commonModel.User{RawToken: token}, appName, envName, compName)
	s.ErrorIs(err, apiErr)
	s.Nil(actual)
}

func (s *handlerTestSuite) Test_GetComponentVulnerabilities_NoActiveDeployment() {
	appName, envName, compName, token := "anyapp", "anyenv", "anycomp", "anytoken"
	radixApiResponse := &serviceModels.Environment{Name: "modelEnv"}
	s.radixApi.EXPECT().GetEnvironment(gomock.Any(), token, appName, envName).Return(radixApiResponse, nil)

	sut := &handler{repo: s.repo, radixapi: s.radixApi}
	actual, err := sut.GetComponentVulnerabilities(context.Background(), &commonModel.User{RawToken: token}, appName, envName, compName)
	s.ErrorIs(err, apiErrors.ErrNotFound)
	s.Nil(actual)
}

func (s *handlerTestSuite) Test_GetComponentVulnerabilities_NonExistingComponent() {
	appName, envName, compName, token := "anyapp", "anyenv", "comp", "anytoken"
	radixApiResponse := &serviceModels.Environment{Name: "modelEnv", ActiveDeployment: &serviceModels.Deployment{Components: []serviceModels.Component{{Name: compName, Type: "job"}}}}
	s.radixApi.EXPECT().GetEnvironment(gomock.Any(), token, appName, envName).Return(radixApiResponse, nil)

	sut := &handler{repo: s.repo, radixapi: s.radixApi}
	actual, err := sut.GetComponentVulnerabilities(context.Background(), &commonModel.User{RawToken: token}, appName, envName, compName)
	s.ErrorIs(err, apiErrors.ErrNotFound)
	s.Nil(actual)
}

func (s *handlerTestSuite) Test_GetComponentVulnerabilities_RepositoryError() {
	appName, envName, compName, token, repoErr := "anyapp", "anyenv", "comp", "anytoken", errors.New("anyerr")
	radixApiResponse := &serviceModels.Environment{
		Name: "modelEnv",
		ActiveDeployment: &serviceModels.Deployment{
			Components: []serviceModels.Component{
				{Name: compName, Type: "component", Image: "compimage"},
			},
		},
	}
	s.radixApi.EXPECT().GetEnvironment(gomock.Any(), token, appName, envName).Return(radixApiResponse, nil)
	s.repo.EXPECT().
		GetLastImageScan(gomock.Any(), []string{"compimage"}, repository.GetLastImageScanOptions{IncludeVulnerabilityAggregate: true, IncludeVulnerabilities: true}).
		Return(nil, repoErr)

	sut := &handler{repo: s.repo, radixapi: s.radixApi}
	actual, err := sut.GetComponentVulnerabilities(context.Background(), &commonModel.User{RawToken: token}, appName, envName, compName)
	s.ErrorIs(err, repoErr)
	s.Nil(actual)
}

func (s *handlerTestSuite) Test_GetComponentVulnerabilities_MissingInRepo() {
	appName, envName, compName, token := "anyapp", "anyenv", "comp", "anytoken"
	radixApiResponse := &serviceModels.Environment{
		Name: "modelEnv",
		ActiveDeployment: &serviceModels.Deployment{
			Components: []serviceModels.Component{
				{Name: compName, Type: "component", Image: "compimage"},
			},
		},
	}
	s.radixApi.EXPECT().GetEnvironment(gomock.Any(), token, appName, envName).Return(radixApiResponse, nil)
	s.repo.EXPECT().
		GetLastImageScan(gomock.Any(), []string{"compimage"}, repository.GetLastImageScanOptions{IncludeVulnerabilityAggregate: true, IncludeVulnerabilities: true}).
		Return([]repoModels.ImageDto{}, nil)

	sut := &handler{repo: s.repo, radixapi: s.radixApi}
	actual, err := sut.GetComponentVulnerabilities(context.Background(), &commonModel.User{RawToken: token}, appName, envName, compName)
	s.NoError(err)
	expected := &apiModels.ImageWithLastScan{Image: apiModels.Image{ImageName: "compimage"}}
	s.Equal(expected, actual)
}

func (s *handlerTestSuite) Test_GetComponentVulnerabilities_NeverScanned() {
	appName, envName, compName, token := "anyapp", "anyenv", "comp", "anytoken"
	radixApiResponse := &serviceModels.Environment{
		Name: "modelEnv",
		ActiveDeployment: &serviceModels.Deployment{
			Components: []serviceModels.Component{
				{Name: compName, Type: "component", Image: "compimage"},
			},
		},
	}
	s.radixApi.EXPECT().GetEnvironment(gomock.Any(), token, appName, envName).Return(radixApiResponse, nil)
	repoResponse := []repoModels.ImageDto{{Name: "compimage", BaseImage: "baseimage"}}
	s.repo.EXPECT().
		GetLastImageScan(gomock.Any(), []string{"compimage"}, repository.GetLastImageScanOptions{IncludeVulnerabilityAggregate: true, IncludeVulnerabilities: true}).
		Return(repoResponse, nil)

	sut := &handler{repo: s.repo, radixapi: s.radixApi}
	actual, err := sut.GetComponentVulnerabilities(context.Background(), &commonModel.User{RawToken: token}, appName, envName, compName)
	s.NoError(err)
	expected := &apiModels.ImageWithLastScan{Image: apiModels.Image{ImageName: "compimage", BaseImage: "baseimage"}}
	s.Equal(expected, actual)
}

func (s *handlerTestSuite) Test_GetComponentVulnerabilities_ScanFailed() {
	appName, envName, compName, token := "anyapp", "anyenv", "comp", "anytoken"
	radixApiResponse := &serviceModels.Environment{
		Name: "modelEnv",
		ActiveDeployment: &serviceModels.Deployment{
			Components: []serviceModels.Component{
				{Name: compName, Type: "component", Image: "compimage"},
			},
		},
	}
	scanTime := time.Now()
	s.radixApi.EXPECT().GetEnvironment(gomock.Any(), token, appName, envName).Return(radixApiResponse, nil)
	repoResponse := []repoModels.ImageDto{{Name: "compimage", BaseImage: "baseimage", Scans: []repoModels.ImageScanDto{{ScanTime: scanTime, ScanSuccess: false}}}}
	s.repo.EXPECT().
		GetLastImageScan(gomock.Any(), []string{"compimage"}, repository.GetLastImageScanOptions{IncludeVulnerabilityAggregate: true, IncludeVulnerabilities: true}).
		Return(repoResponse, nil)

	sut := &handler{repo: s.repo, radixapi: s.radixApi}
	actual, err := sut.GetComponentVulnerabilities(context.Background(), &commonModel.User{RawToken: token}, appName, envName, compName)
	s.NoError(err)
	expected := &apiModels.ImageWithLastScan{
		Image: apiModels.Image{ImageName: "compimage",
			BaseImage: "baseimage"},
		ImageScan: &apiModels.ImageScan{ScanTime: scanTime, ScanSuccess: false, Vulnerabilities: []apiModels.Vulnerability{}, VulnerabilitySummary: map[string]int{}},
	}
	s.Equal(expected, actual)
}

func (s *handlerTestSuite) Test_GetComponentVulnerabilities() {
	appName, envName, compName, token := "anyapp", "anyenv", "comp", "anytoken"
	radixApiResponse := &serviceModels.Environment{
		Name: "modelEnv",
		ActiveDeployment: &serviceModels.Deployment{
			Components: []serviceModels.Component{
				{Name: compName, Type: "component", Image: "compimage"},
			},
		},
	}
	scanTime := time.Now()
	s.radixApi.EXPECT().GetEnvironment(gomock.Any(), token, appName, envName).Return(radixApiResponse, nil)
	repoResponse := []repoModels.ImageDto{
		{
			Name: "compimage", BaseImage: "baseimage", Scans: []repoModels.ImageScanDto{
				{
					ScanTime: scanTime, ScanSuccess: true,
					VulnerabilityAggregation: []repoModels.ImageScanVulnerabilityAggregation{{Severity: "s1", Count: 10}, {Severity: "s2", Count: 20}},
					Vulnerabilities: []repoModels.VulnerabilityDto{
						{
							ExternalId: "snykid", PackageName: "pkg", Version: "ver", Title: "title", Description: "desc", Severity: "high",
							CVSS: s.float32Ptr(5), CVSSv3: "cvssv3", PublicationTime: time.Now().Add(time.Second),
							References: []repoModels.VulnerabilityReferenceDto{{Url: "url1"}},
							Identifiers: []repoModels.VulnerabilityIdentifierDto{
								{IdentifierType: "CVE", Identifier: "cve1"}, {IdentifierType: "CWE", Identifier: "cwe1"},
							},
						},
					},
				},
			}},
	}
	s.repo.EXPECT().
		GetLastImageScan(gomock.Any(), []string{"compimage"}, repository.GetLastImageScanOptions{IncludeVulnerabilityAggregate: true, IncludeVulnerabilities: true}).
		Return(repoResponse, nil)

	sut := &handler{repo: s.repo, radixapi: s.radixApi}
	actual, err := sut.GetComponentVulnerabilities(context.Background(), &commonModel.User{RawToken: token}, appName, envName, compName)
	s.NoError(err)
	expectedVuln := apiModels.Vulnerability{}
	expectedVuln.FromDto(&repoResponse[0].Scans[0].Vulnerabilities[0])
	expected := &apiModels.ImageWithLastScan{
		Image: apiModels.Image{
			ImageName: "compimage",
			BaseImage: "baseimage",
		},
		ImageScan: &apiModels.ImageScan{
			ScanTime:    scanTime,
			ScanSuccess: true,
			Vulnerabilities: []apiModels.Vulnerability{
				expectedVuln,
			},
			VulnerabilitySummary: map[string]int{"s1": 10, "s2": 20},
		},
	}
	s.Equal(expected, actual)
}

func (s *handlerTestSuite) Test_GetJobVulnerabilities_RadixApiError() {
	appName, envName, compName, token, apiErr := "anyapp", "anyenv", "anycomp", "anytoken", errors.New("anyerr")
	s.radixApi.EXPECT().GetEnvironment(gomock.Any(), token, appName, envName).Return(nil, apiErr)

	sut := &handler{repo: s.repo, radixapi: s.radixApi}
	actual, err := sut.GetJobVulnerabilities(context.Background(), &commonModel.User{RawToken: token}, appName, envName, compName)
	s.ErrorIs(err, apiErr)
	s.Nil(actual)
}

func (s *handlerTestSuite) Test_GetJobVulnerabilities_NoActiveDeployment() {
	appName, envName, compName, token := "anyapp", "anyenv", "anycomp", "anytoken"
	radixApiResponse := &serviceModels.Environment{Name: "modelEnv"}
	s.radixApi.EXPECT().GetEnvironment(gomock.Any(), token, appName, envName).Return(radixApiResponse, nil)

	sut := &handler{repo: s.repo, radixapi: s.radixApi}
	actual, err := sut.GetJobVulnerabilities(context.Background(), &commonModel.User{RawToken: token}, appName, envName, compName)
	s.ErrorIs(err, apiErrors.ErrNotFound)
	s.Nil(actual)
}

func (s *handlerTestSuite) Test_GetJobVulnerabilities_NonExistingComponent() {
	appName, envName, compName, token := "anyapp", "anyenv", "comp", "anytoken"
	radixApiResponse := &serviceModels.Environment{Name: "modelEnv", ActiveDeployment: &serviceModels.Deployment{Components: []serviceModels.Component{{Name: compName, Type: "component"}}}}
	s.radixApi.EXPECT().GetEnvironment(gomock.Any(), token, appName, envName).Return(radixApiResponse, nil)

	sut := &handler{repo: s.repo, radixapi: s.radixApi}
	actual, err := sut.GetJobVulnerabilities(context.Background(), &commonModel.User{RawToken: token}, appName, envName, compName)
	s.ErrorIs(err, apiErrors.ErrNotFound)
	s.Nil(actual)
}

func (s *handlerTestSuite) Test_GetJobVulnerabilities_RepositoryError() {
	appName, envName, compName, token, repoErr := "anyapp", "anyenv", "comp", "anytoken", errors.New("anyerr")
	radixApiResponse := &serviceModels.Environment{
		Name: "modelEnv",
		ActiveDeployment: &serviceModels.Deployment{
			Components: []serviceModels.Component{
				{Name: compName, Type: "job", Image: "compimage"},
			},
		},
	}
	s.radixApi.EXPECT().GetEnvironment(gomock.Any(), token, appName, envName).Return(radixApiResponse, nil)
	s.repo.EXPECT().
		GetLastImageScan(gomock.Any(), []string{"compimage"}, repository.GetLastImageScanOptions{IncludeVulnerabilityAggregate: true, IncludeVulnerabilities: true}).
		Return(nil, repoErr)

	sut := &handler{repo: s.repo, radixapi: s.radixApi}
	actual, err := sut.GetJobVulnerabilities(context.Background(), &commonModel.User{RawToken: token}, appName, envName, compName)
	s.ErrorIs(err, repoErr)
	s.Nil(actual)
}

func (s *handlerTestSuite) Test_GetJobVulnerabilities_MissingInRepo() {
	appName, envName, compName, token := "anyapp", "anyenv", "comp", "anytoken"
	radixApiResponse := &serviceModels.Environment{
		Name: "modelEnv",
		ActiveDeployment: &serviceModels.Deployment{
			Components: []serviceModels.Component{
				{Name: compName, Type: "job", Image: "compimage"},
			},
		},
	}
	s.radixApi.EXPECT().GetEnvironment(gomock.Any(), token, appName, envName).Return(radixApiResponse, nil)
	s.repo.EXPECT().
		GetLastImageScan(gomock.Any(), []string{"compimage"}, repository.GetLastImageScanOptions{IncludeVulnerabilityAggregate: true, IncludeVulnerabilities: true}).
		Return([]repoModels.ImageDto{}, nil)

	sut := &handler{repo: s.repo, radixapi: s.radixApi}
	actual, err := sut.GetJobVulnerabilities(context.Background(), &commonModel.User{RawToken: token}, appName, envName, compName)
	s.NoError(err)
	expected := &apiModels.ImageWithLastScan{Image: apiModels.Image{ImageName: "compimage"}}
	s.Equal(expected, actual)
}

func (s *handlerTestSuite) Test_GetJobVulnerabilities_NeverScanned() {
	appName, envName, compName, token := "anyapp", "anyenv", "comp", "anytoken"
	radixApiResponse := &serviceModels.Environment{
		Name: "modelEnv",
		ActiveDeployment: &serviceModels.Deployment{
			Components: []serviceModels.Component{
				{Name: compName, Type: "job", Image: "compimage"},
			},
		},
	}
	s.radixApi.EXPECT().GetEnvironment(gomock.Any(), token, appName, envName).Return(radixApiResponse, nil)
	repoResponse := []repoModels.ImageDto{{Name: "compimage", BaseImage: "baseimage"}}
	s.repo.EXPECT().
		GetLastImageScan(gomock.Any(), []string{"compimage"}, repository.GetLastImageScanOptions{IncludeVulnerabilityAggregate: true, IncludeVulnerabilities: true}).
		Return(repoResponse, nil)

	sut := &handler{repo: s.repo, radixapi: s.radixApi}
	actual, err := sut.GetJobVulnerabilities(context.Background(), &commonModel.User{RawToken: token}, appName, envName, compName)
	s.NoError(err)
	expected := &apiModels.ImageWithLastScan{Image: apiModels.Image{ImageName: "compimage", BaseImage: "baseimage"}}
	s.Equal(expected, actual)
}

func (s *handlerTestSuite) Test_GetJobVulnerabilities_ScanFailed() {
	appName, envName, compName, token := "anyapp", "anyenv", "comp", "anytoken"
	radixApiResponse := &serviceModels.Environment{
		Name: "modelEnv",
		ActiveDeployment: &serviceModels.Deployment{
			Components: []serviceModels.Component{
				{Name: compName, Type: "job", Image: "compimage"},
			},
		},
	}
	scanTime := time.Now()
	s.radixApi.EXPECT().GetEnvironment(gomock.Any(), token, appName, envName).Return(radixApiResponse, nil)
	repoResponse := []repoModels.ImageDto{{Name: "compimage", BaseImage: "baseimage", Scans: []repoModels.ImageScanDto{{ScanTime: scanTime, ScanSuccess: false}}}}
	s.repo.EXPECT().
		GetLastImageScan(gomock.Any(), []string{"compimage"}, repository.GetLastImageScanOptions{IncludeVulnerabilityAggregate: true, IncludeVulnerabilities: true}).
		Return(repoResponse, nil)

	sut := &handler{repo: s.repo, radixapi: s.radixApi}
	actual, err := sut.GetJobVulnerabilities(context.Background(), &commonModel.User{RawToken: token}, appName, envName, compName)
	s.NoError(err)
	expected := &apiModels.ImageWithLastScan{
		Image: apiModels.Image{ImageName: "compimage",
			BaseImage: "baseimage"},
		ImageScan: &apiModels.ImageScan{ScanTime: scanTime, ScanSuccess: false, Vulnerabilities: []apiModels.Vulnerability{}, VulnerabilitySummary: map[string]int{}},
	}
	s.Equal(expected, actual)
}

func (s *handlerTestSuite) Test_GetJobVulnerabilities() {
	appName, envName, compName, token := "anyapp", "anyenv", "comp", "anytoken"
	radixApiResponse := &serviceModels.Environment{
		Name: "modelEnv",
		ActiveDeployment: &serviceModels.Deployment{
			Components: []serviceModels.Component{
				{Name: compName, Type: "job", Image: "compimage"},
			},
		},
	}
	scanTime := time.Now()
	s.radixApi.EXPECT().GetEnvironment(gomock.Any(), token, appName, envName).Return(radixApiResponse, nil)
	repoResponse := []repoModels.ImageDto{
		{
			Name: "compimage", BaseImage: "baseimage", Scans: []repoModels.ImageScanDto{
				{
					ScanTime: scanTime, ScanSuccess: true,
					VulnerabilityAggregation: []repoModels.ImageScanVulnerabilityAggregation{{Severity: "s1", Count: 10}, {Severity: "s2", Count: 20}},
					Vulnerabilities: []repoModels.VulnerabilityDto{
						{
							ExternalId: "snykid", PackageName: "pkg", Version: "ver", Title: "title", Description: "desc", Severity: "high",
							CVSS: s.float32Ptr(5), CVSSv3: "cvssv3", PublicationTime: time.Now().Add(time.Second),
							References: []repoModels.VulnerabilityReferenceDto{{Url: "url1"}},
							Identifiers: []repoModels.VulnerabilityIdentifierDto{
								{IdentifierType: "CVE", Identifier: "cve1"}, {IdentifierType: "CWE", Identifier: "cwe1"},
							},
						},
					},
				},
			}},
	}
	s.repo.EXPECT().
		GetLastImageScan(gomock.Any(), []string{"compimage"}, repository.GetLastImageScanOptions{IncludeVulnerabilityAggregate: true, IncludeVulnerabilities: true}).
		Return(repoResponse, nil)

	sut := &handler{repo: s.repo, radixapi: s.radixApi}
	actual, err := sut.GetJobVulnerabilities(context.Background(), &commonModel.User{RawToken: token}, appName, envName, compName)
	s.NoError(err)
	expectedVuln := apiModels.Vulnerability{}
	expectedVuln.FromDto(&repoResponse[0].Scans[0].Vulnerabilities[0])
	expected := &apiModels.ImageWithLastScan{
		Image: apiModels.Image{
			ImageName: "compimage",
			BaseImage: "baseimage",
		},
		ImageScan: &apiModels.ImageScan{
			ScanTime:    scanTime,
			ScanSuccess: true,
			Vulnerabilities: []apiModels.Vulnerability{
				expectedVuln,
			},
			VulnerabilitySummary: map[string]int{"s1": 10, "s2": 20},
		},
	}
	s.Equal(expected, actual)
}

func (*handlerTestSuite) float32Ptr(val float32) *float32 {
	return &val
}
