// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/vulnerability/handler.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/equinor/radix-vulnerability-scanner-api/api/models"
	models0 "github.com/equinor/radix-vulnerability-scanner-api/models"
	gomock "github.com/golang/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// GetApplicationVulnerabilitySummaries mocks base method.
func (m *MockHandler) GetApplicationVulnerabilitySummaries(ctx context.Context, user *models0.User, appName string) (models.ApplicationVulnerabilities, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationVulnerabilitySummaries", ctx, user, appName)
	ret0, _ := ret[0].(models.ApplicationVulnerabilities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationVulnerabilitySummaries indicates an expected call of GetApplicationVulnerabilitySummaries.
func (mr *MockHandlerMockRecorder) GetApplicationVulnerabilitySummaries(ctx, user, appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationVulnerabilitySummaries", reflect.TypeOf((*MockHandler)(nil).GetApplicationVulnerabilitySummaries), ctx, user, appName)
}

// GetComponentVulnerabilities mocks base method.
func (m *MockHandler) GetComponentVulnerabilities(ctx context.Context, user *models0.User, appName, envName, componentName string) (*models.ImageWithLastScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponentVulnerabilities", ctx, user, appName, envName, componentName)
	ret0, _ := ret[0].(*models.ImageWithLastScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComponentVulnerabilities indicates an expected call of GetComponentVulnerabilities.
func (mr *MockHandlerMockRecorder) GetComponentVulnerabilities(ctx, user, appName, envName, componentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentVulnerabilities", reflect.TypeOf((*MockHandler)(nil).GetComponentVulnerabilities), ctx, user, appName, envName, componentName)
}

// GetEnvironmentVulnerabilitySummary mocks base method.
func (m *MockHandler) GetEnvironmentVulnerabilitySummary(ctx context.Context, user *models0.User, appName, envName string) (*models.EnvironmentVulnerabilities, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentVulnerabilitySummary", ctx, user, appName, envName)
	ret0, _ := ret[0].(*models.EnvironmentVulnerabilities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentVulnerabilitySummary indicates an expected call of GetEnvironmentVulnerabilitySummary.
func (mr *MockHandlerMockRecorder) GetEnvironmentVulnerabilitySummary(ctx, user, appName, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentVulnerabilitySummary", reflect.TypeOf((*MockHandler)(nil).GetEnvironmentVulnerabilitySummary), ctx, user, appName, envName)
}

// GetJobVulnerabilities mocks base method.
func (m *MockHandler) GetJobVulnerabilities(ctx context.Context, user *models0.User, appName, envName, jobName string) (*models.ImageWithLastScan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobVulnerabilities", ctx, user, appName, envName, jobName)
	ret0, _ := ret[0].(*models.ImageWithLastScan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobVulnerabilities indicates an expected call of GetJobVulnerabilities.
func (mr *MockHandlerMockRecorder) GetJobVulnerabilities(ctx, user, appName, envName, jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobVulnerabilities", reflect.TypeOf((*MockHandler)(nil).GetJobVulnerabilities), ctx, user, appName, envName, jobName)
}
