package vulnerability

import (
	"time"

	_ "github.com/denisenkom/go-mssqldb"
	apiModels "github.com/equinor/radix-vulnerability-scanner-api/api/models"
	"github.com/equinor/radix-vulnerability-scanner-api/models"
	"github.com/equinor/radix-vulnerability-scanner-api/repository"
	"github.com/equinor/radix-vulnerability-scanner-api/service"
)

// VulnerabilityHandler Instance variables
type VulnerabilityHandler struct {
	user     *models.User
	radixapi service.RadixAPIService
	repo     repository.Repository
}

// NewVulnerabilityHandler Constructor
func NewVulnerabilityHandler(user *models.User, radixapi service.RadixAPIService, repo repository.Repository) VulnerabilityHandler {
	return VulnerabilityHandler{
		user:     user,
		radixapi: radixapi,
		repo:     repo,
	}
}

func (h *VulnerabilityHandler) GetEnvironmentVulnerabilitySummary(appName, envName string) (*apiModels.EnvironmentSummary, error) {
	env, err := h.radixapi.GetEnvironment(appName, envName, h.user.RawToken)
	if err != nil {
		return nil, err
	}

	components := apiModels.ComponentVulnerabilitySummary{}
	jobs := apiModels.ComponentVulnerabilitySummary{}

	if d := env.ActiveDeployment; d != nil {
		for _, dc := range d.Components {
			scanSummary := apiModels.ImageScanSummary{
				Image:           dc.Image,
				BaseImage:       "tba",
				LastScanned:     time.Now(),
				LastScanSuccess: true,
				VulnerabilitySummary: apiModels.VulnerabilitySeveritySummary{
					"critical": 3,
					"high":     12,
					"medium":   5,
					"low":      27,
				},
			}
			switch dc.Type {
			case "component":
				components[dc.Name] = scanSummary
			case "job":
				jobs[dc.Name] = scanSummary
			}
		}
	}

	summary := apiModels.EnvironmentSummary{
		Name:       env.Name,
		Components: components,
		Jobs:       jobs,
	}

	return &summary, nil
}
