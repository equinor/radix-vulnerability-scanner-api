package vulnerability

import (
	"context"
	"strings"

	_ "github.com/denisenkom/go-mssqldb"
	apiModels "github.com/equinor/radix-vulnerability-scanner-api/api/models"
	"github.com/equinor/radix-vulnerability-scanner-api/models"
	"github.com/equinor/radix-vulnerability-scanner-api/repository"
	repositoryModels "github.com/equinor/radix-vulnerability-scanner-api/repository/models"
	"github.com/equinor/radix-vulnerability-scanner-api/service"
	serviceModels "github.com/equinor/radix-vulnerability-scanner-api/service/models"
	"github.com/equinor/radix-vulnerability-scanner-api/utils/slice"
)

// VulnerabilityHandler Instance variables
type VulnerabilityHandler struct {
	user     *models.User
	radixapi service.RadixAPIService
	repo     repository.Repository
}

// NewVulnerabilityHandler Constructor
func NewVulnerabilityHandler(user *models.User, radixapi service.RadixAPIService, repo repository.Repository) VulnerabilityHandler {
	return VulnerabilityHandler{
		user:     user,
		radixapi: radixapi,
		repo:     repo,
	}
}

func (h *VulnerabilityHandler) GetEnvironmentVulnerabilitySummary(ctx context.Context, appName, envName string) (*apiModels.EnvironmentSummary, error) {
	env, err := h.radixapi.GetEnvironment(ctx, appName, envName, h.user.RawToken)
	if err != nil {
		return nil, err
	}

	components := apiModels.ComponentVulnerabilitySummary{}
	jobs := apiModels.ComponentVulnerabilitySummary{}

	if d := env.ActiveDeployment; d != nil {
		imageNames := h.getImageNamesFromDeployment(*env.ActiveDeployment)
		images, err := h.repo.GetLastImageScan(ctx, imageNames, repository.GetLastImageScanOptions{IncludeVulnerabilityAggregate: true})
		if err != nil {
			return nil, err
		}

		for _, dc := range d.Components {
			scanSummary := apiModels.ImageScanSummary{Image: apiModels.Image{Image: dc.Image}}
			image, found := slice.First(images, func(obj repositoryModels.ImageDto) bool { return strings.EqualFold(dc.Image, obj.Name) })

			if found {
				scanSummary.BaseImage = image.BaseImage

				if len(image.Scans) > 0 {
					scan := image.Scans[0]
					scanSummary.LastScanned = scan.ScanTime
					scanSummary.LastScanSuccess = scan.ScanSuccess

					if len(scan.VulnerabilityAggregation) > 0 {
						scanSummary.VulnerabilitySummary = make(apiModels.VulnerabilitySeveritySummary)

						for _, agg := range scan.VulnerabilityAggregation {
							scanSummary.VulnerabilitySummary[agg.Severity] = agg.Count
						}
					}
				}
			}

			switch dc.Type {
			case "component":
				components[dc.Name] = scanSummary
			case "job":
				jobs[dc.Name] = scanSummary
			}
		}
	}

	summary := apiModels.EnvironmentSummary{
		Name:       env.Name,
		Components: components,
		Jobs:       jobs,
	}

	return &summary, nil
}

func (h *VulnerabilityHandler) GetComponentVulnerabilities(ctx context.Context, appName, envName string, componentName string) (*apiModels.EnvironmentSummary, error) {
	env, err := h.radixapi.GetEnvironment(ctx, appName, envName, h.user.RawToken)
	if err != nil {
		return nil, err
	}

	components := apiModels.ComponentVulnerabilitySummary{}
	jobs := apiModels.ComponentVulnerabilitySummary{}

	if d := env.ActiveDeployment; d != nil {
		dc, found := slice.First(d.Components, func(obj serviceModels.Component) bool { return strings.EqualFold(obj.Name, componentName) })
		if found {
			images, err := h.repo.GetLastImageScan(ctx, []string{dc.Image}, repository.GetLastImageScanOptions{IncludeVulnerabilityAggregate: true, IncludeVulnerabilities: true})
			if err != nil {
				return nil, err
			}

			scanSummary := apiModels.ImageScanSummary{Image: apiModels.Image{Image: dc.Image}}
			image, found := slice.First(images, func(obj repositoryModels.ImageDto) bool { return strings.EqualFold(dc.Image, obj.Name) })

			if found {
				scanSummary.BaseImage = image.BaseImage

				if len(image.Scans) > 0 {
					scan := image.Scans[0]
					scanSummary.LastScanned = scan.ScanTime
					scanSummary.LastScanSuccess = scan.ScanSuccess

					if len(scan.VulnerabilityAggregation) > 0 {
						scanSummary.VulnerabilitySummary = make(apiModels.VulnerabilitySeveritySummary)

						for _, agg := range scan.VulnerabilityAggregation {
							scanSummary.VulnerabilitySummary[agg.Severity] = agg.Count
						}
					}
				}
			}

			switch dc.Type {
			case "component":
				components[dc.Name] = scanSummary
			case "job":
				jobs[dc.Name] = scanSummary
			}
		}
	}

	summary := apiModels.EnvironmentSummary{
		Name:       env.Name,
		Components: components,
		Jobs:       jobs,
	}

	return &summary, nil
}

func (h *VulnerabilityHandler) getImageNamesFromDeployment(d serviceModels.Deployment) (images []string) {
	for _, c := range d.Components {
		images = append(images, c.Image)
	}
	return
}
