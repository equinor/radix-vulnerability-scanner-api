package vulnerability

import (
	"encoding/json"
	"errors"
	"net/http"

	"github.com/equinor/radix-vulnerability-scanner-api/api"
	apiErrors "github.com/equinor/radix-vulnerability-scanner-api/api/errors"
	vulnerabilityModels "github.com/equinor/radix-vulnerability-scanner-api/api/vulnerability/models"
	"github.com/equinor/radix-vulnerability-scanner-api/models"
	"github.com/gin-gonic/gin"
)

const rootPath = ""
const appPath = rootPath + "/applications/:appName"
const envPath = appPath + "/environments/:envName"

type controller struct {
	handler Handler
	// radixapi service.RadixAPIService
	// repo     repository.Interface
}

// NewController Constructor
func NewController(handler Handler) api.Controller {
	return &controller{
		handler: handler,
	}
}

// GetRoutes List the supported routes of this controller
func (ctrl *controller) GetRoutes() []api.Route {
	routes := []api.Route{
		{
			Path:    path.Join(rootPath, "/applications/vulnerabilities/_search"),
			Method:  "POST",
			Handler: ctrl.GetApplicationsVulnerabilitySummaries,
		},
		{
			Path:    rootPath + "/applications/vulnerabilities/:appName",
			Method:  "GET",
			Handler: ctrl.GetApplicationVulnerabilitySummaries,
		},
		{
			Path:    envPath,
			Method:  "GET",
			Handler: ctrl.GetEnvironmentVulnerabilitySummary,
		},
		{
			Path:    envPath + "/components/:componentName",
			Method:  "GET",
			Handler: ctrl.GetComponentVulnerabilities,
		},
		{
			Path:    envPath + "/jobs/:jobName",
			Method:  "GET",
			Handler: ctrl.GetJobVulnerabilities,
		},
	}

	return routes
}

// GetApplicationsVulnerabilitySummaries returns vulnerability summaries for components and jobs in a list of applications
func (ctrl *controller) GetApplicationsVulnerabilitySummaries(c *gin.Context) {
	// swagger:operation GET /applications/vulnerabilities/_search vulnerability getApplicationsVulnerabilitySummaries
	// ---
	// summary: Gets vulnerability summaries for components and jobs for several applications
	// parameters:
	// - name: applicationSearch
	//   in: body
	//   description: List of application names to search for
	//   required: true
	//   schema:
	//       "$ref": "#/definitions/VulnerabilitySearchRequest"
	// responses:
	//   "200":
	//     description: "Successful get vulnerability summaries for applications"
	//     schema:
	//        "$ref": "#/definitions/EnvironmentVulnerabilities"
	//   "401":
	//     description: "Unauthorized"
	//   "400":
	//     description: "Bad request"
	//   "404":
	//     description: "Not found"

	if c.Request.Body == nil {
		// required request body is missing
		apiErrors.HandleErrorJSON(c, apiErrors.ErrBadRequest)
		return
	}

	var appNamesRequest vulnerabilityModels.VulnerabilitySearchRequest
	if err := json.NewDecoder(c.Request.Body).Decode(&appNamesRequest); err != nil {
		apiErrors.HandleErrorJSON(c, err)
		return
	}

	user, ok := c.MustGet("user").(*models.User)
	if !ok {
		panic(errors.New("invalid object type for user"))
	}

	summary, err := ctrl.handler.GetApplicationsVulnerabilitySummaries(c.Request.Context(), user, appNamesRequest.Names)
	if err != nil {
		apiErrors.HandleErrorJSON(c, err)
		return
	}

	c.JSON(http.StatusOK, summary)
}

// GetApplicationVulnerabilitySummaries returns vulnerability summaries for components and jobs in an application
func (ctrl *controller) GetApplicationVulnerabilitySummaries(c *gin.Context) {
	// swagger:operation GET /applications/vulnerabilities/{appName} vulnerability getApplicationVulnerabilitySummaries
	// ---
	// summary: Gets vulnerability summaries for components and jobs in an application
	// parameters:
	// - name: appName
	//   in: path
	//   description: Name of the application
	//   type: string
	//   required: true
	// responses:
	//   "200":
	//     description: "Successful get vulnerability summaries for application"
	//     schema:
	//        "$ref": "#/definitions/EnvironmentVulnerabilities"
	//   "401":
	//     description: "Unauthorized"
	//   "404":
	//     description: "Not found"

	user, ok := c.MustGet("user").(*models.User)
	if !ok {
		panic(errors.New("invalid object type for user"))
	}

	summary, err := ctrl.handler.GetApplicationVulnerabilitySummaries(c.Request.Context(), user, c.Param("appName"))
	if err != nil {
		apiErrors.HandleErrorJSON(c, err)
		return
	}

	c.JSON(http.StatusOK, summary)
}

// GetEnvironmentVulnerabilitySummary returns vulnerability counts aggregated by severity for components and jobs in an environment
func (ctrl *controller) GetEnvironmentVulnerabilitySummary(c *gin.Context) {
	// swagger:operation GET /applications/{appName}/environments/{envName} vulnerability getEnvironmentVulnerabilitySummary
	// ---
	// summary: Gets vulnerability summary for components in an environment
	// parameters:
	// - name: appName
	//   in: path
	//   description: Name of the application
	//   type: string
	//   required: true
	// - name: envName
	//   in: path
	//   description: Name of the environment
	//   type: string
	//   required: true
	// responses:
	//   "200":
	//     description: "Successful get vulnerability summary for application"
	//     schema:
	//        "$ref": "#/definitions/EnvironmentVulnerabilities"
	//   "401":
	//     description: "Unauthorized"
	//   "404":
	//     description: "Not found"

	user, ok := c.MustGet("user").(*models.User)
	if !ok {
		panic(errors.New("invalid object type for user"))
	}

	summary, err := ctrl.handler.GetEnvironmentVulnerabilitySummary(c.Request.Context(), user, c.Param("appName"), c.Param("envName"))
	if err != nil {
		apiErrors.HandleErrorJSON(c, err)
		return
	}

	c.JSON(http.StatusOK, summary)
}

// GetComponentVulnerabilities returns list of vulnerabilties for a component
func (ctrl *controller) GetComponentVulnerabilities(c *gin.Context) {
	// swagger:operation GET /applications/{appName}/environments/{envName}/components/{componentName} vulnerability getComponentVulnerabilities
	// ---
	// summary: Gets vulnerability summary for components in an environment
	// parameters:
	// - name: appName
	//   in: path
	//   description: Name of the application
	//   type: string
	//   required: true
	// - name: envName
	//   in: path
	//   description: Name of the environment
	//   type: string
	//   required: true
	// - name: componentName
	//   in: path
	//   description: Name of the component
	//   type: string
	//   required: true
	// responses:
	//   "200":
	//     description: "Successful get vulnerabilities for a component"
	//     schema:
	//        "$ref": "#/definitions/ImageWithLastScan"
	//   "401":
	//     description: "Unauthorized"
	//   "404":
	//     description: "Not found"

	user, ok := c.MustGet("user").(*models.User)
	if !ok {
		panic(errors.New("invalid object type for user"))
	}

	summary, err := ctrl.handler.GetComponentVulnerabilities(c.Request.Context(), user, c.Param("appName"), c.Param("envName"), c.Param("componentName"))
	if err != nil {
		apiErrors.HandleErrorJSON(c, err)
		return
	}

	c.JSON(http.StatusOK, summary)
}

// GetJobVulnerabilities returns list of vulnerabilties for a job
func (ctrl *controller) GetJobVulnerabilities(c *gin.Context) {
	// swagger:operation GET /applications/{appName}/environments/{envName}/jobs/{jobName} vulnerability getJobVulnerabilities
	// ---
	// summary: Gets vulnerability summary for job in an environment
	// parameters:
	// - name: appName
	//   in: path
	//   description: Name of the application
	//   type: string
	//   required: true
	// - name: envName
	//   in: path
	//   description: Name of the environment
	//   type: string
	//   required: true
	// - name: jobName
	//   in: path
	//   description: Name of the job
	//   type: string
	//   required: true
	// responses:
	//   "200":
	//     description: "Successful get vulnerabilities for a job"
	//     schema:
	//        "$ref": "#/definitions/ImageWithLastScan"
	//   "401":
	//     description: "Unauthorized"
	//   "404":
	//     description: "Not found"

	user, ok := c.MustGet("user").(*models.User)
	if !ok {
		panic(errors.New("invalid object type for user"))
	}

	summary, err := ctrl.handler.GetJobVulnerabilities(c.Request.Context(), user, c.Param("appName"), c.Param("envName"), c.Param("jobName"))
	if err != nil {
		apiErrors.HandleErrorJSON(c, err)
		return
	}

	c.JSON(http.StatusOK, summary)
}
