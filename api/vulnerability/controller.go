package vulnerability

import (
	"errors"
	"net/http"

	"github.com/equinor/radix-vulnerability-scanner-api/api"
	"github.com/equinor/radix-vulnerability-scanner-api/models"
	"github.com/equinor/radix-vulnerability-scanner-api/repository"
	"github.com/equinor/radix-vulnerability-scanner-api/service"
	"github.com/gin-gonic/gin"
)

const rootPath = ""

type controller struct {
	radixapi service.RadixAPIService
	repo     repository.Repository
}

// NewController Constructor
func NewController(radixapi service.RadixAPIService, repo repository.Repository) api.Controller {
	return &controller{
		radixapi: radixapi,
		repo:     repo,
	}
}

// GetRoutes List the supported routes of this controller
func (c *controller) GetRoutes() []api.Route {
	routes := []api.Route{
		{
			Path:    rootPath + "/applications/:appName",
			Method:  "GET",
			Handler: c.GetEnvironment,
		},
		{
			Path:    rootPath + "/applications/:appName/environments/:envName",
			Method:  "GET",
			Handler: c.GetEnvironment,
		},
		{
			Path:    rootPath + "/applications/:appName/environments/:envName/components/:componentName",
			Method:  "GET",
			Handler: c.GetEnvironment,
		},
		{
			Path:    rootPath + "/applications/:appName/environments/:envName/jobs/:jobName",
			Method:  "GET",
			Handler: c.GetEnvironment,
		},
	}

	return routes
}

// GetTotalCosts for all applications for period
func (ctrl *controller) GetEnvironment(c *gin.Context) {
	// swagger:operation GET /applications/{appName}/environments/{envName} vulnerability getEnvironment
	// ---
	// summary: Gets vulnerability summary for components in an environment
	// parameters:
	// - name: appName
	//   in: path
	//   description: Name of the application
	//   type: string
	//   required: true
	// - name: envName
	//   in: path
	//   description: Name of the environment
	//   type: string
	//   required: true
	// responses:
	//   "200":
	//     description: "Successful get vulnerability summary for application"
	//     schema:
	//        "$ref": "#/definitions/ApplicationCostSet"
	//   "401":
	//     description: "Unauthorized"
	//   "404":
	//     description: "Not found"

	user, ok := c.MustGet("user").(*models.User)
	if !ok {
		panic(errors.New("Invalid object type for user"))
	}

	h := NewVulnerabilityHandler(user, ctrl.radixapi, ctrl.repo)
	summary, err := h.GetEnvironmentVulnerabilitySummary(c.Param("appName"), c.Param("envName"))
	if err != nil {
		c.Status(http.StatusInternalServerError)
		return
	}

	c.JSON(http.StatusOK, summary)
}
