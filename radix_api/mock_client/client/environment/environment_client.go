// Code generated by MockGen. DO NOT EDIT.
// Source: ./radix_api/generated_client/client/environment/environment_client.go

// Package environmentmock is a generated GoMock package.
package environmentmock

import (
	reflect "reflect"

	environment "github.com/equinor/radix-vulnerability-scanner-api/radix_api/generated_client/client/environment"
	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
)

// MockClientService is a mock of ClientService interface.
type MockClientService struct {
	ctrl     *gomock.Controller
	recorder *MockClientServiceMockRecorder
}

// MockClientServiceMockRecorder is the mock recorder for MockClientService.
type MockClientServiceMockRecorder struct {
	mock *MockClientService
}

// NewMockClientService creates a new mock instance.
func NewMockClientService(ctrl *gomock.Controller) *MockClientService {
	mock := &MockClientService{ctrl: ctrl}
	mock.recorder = &MockClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientService) EXPECT() *MockClientServiceMockRecorder {
	return m.recorder
}

// ChangeComponentSecret mocks base method.
func (m *MockClientService) ChangeComponentSecret(params *environment.ChangeComponentSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...environment.ClientOption) (*environment.ChangeComponentSecretOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeComponentSecret", varargs...)
	ret0, _ := ret[0].(*environment.ChangeComponentSecretOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeComponentSecret indicates an expected call of ChangeComponentSecret.
func (mr *MockClientServiceMockRecorder) ChangeComponentSecret(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeComponentSecret", reflect.TypeOf((*MockClientService)(nil).ChangeComponentSecret), varargs...)
}

// CreateEnvironment mocks base method.
func (m *MockClientService) CreateEnvironment(params *environment.CreateEnvironmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...environment.ClientOption) (*environment.CreateEnvironmentOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEnvironment", varargs...)
	ret0, _ := ret[0].(*environment.CreateEnvironmentOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironment indicates an expected call of CreateEnvironment.
func (mr *MockClientServiceMockRecorder) CreateEnvironment(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironment", reflect.TypeOf((*MockClientService)(nil).CreateEnvironment), varargs...)
}

// DeleteEnvironment mocks base method.
func (m *MockClientService) DeleteEnvironment(params *environment.DeleteEnvironmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...environment.ClientOption) (*environment.DeleteEnvironmentOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEnvironment", varargs...)
	ret0, _ := ret[0].(*environment.DeleteEnvironmentOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment.
func (mr *MockClientServiceMockRecorder) DeleteEnvironment(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*MockClientService)(nil).DeleteEnvironment), varargs...)
}

// DisableEnvironmentAlerting mocks base method.
func (m *MockClientService) DisableEnvironmentAlerting(params *environment.DisableEnvironmentAlertingParams, authInfo runtime.ClientAuthInfoWriter, opts ...environment.ClientOption) (*environment.DisableEnvironmentAlertingOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableEnvironmentAlerting", varargs...)
	ret0, _ := ret[0].(*environment.DisableEnvironmentAlertingOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableEnvironmentAlerting indicates an expected call of DisableEnvironmentAlerting.
func (mr *MockClientServiceMockRecorder) DisableEnvironmentAlerting(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableEnvironmentAlerting", reflect.TypeOf((*MockClientService)(nil).DisableEnvironmentAlerting), varargs...)
}

// EnableEnvironmentAlerting mocks base method.
func (m *MockClientService) EnableEnvironmentAlerting(params *environment.EnableEnvironmentAlertingParams, authInfo runtime.ClientAuthInfoWriter, opts ...environment.ClientOption) (*environment.EnableEnvironmentAlertingOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableEnvironmentAlerting", varargs...)
	ret0, _ := ret[0].(*environment.EnableEnvironmentAlertingOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableEnvironmentAlerting indicates an expected call of EnableEnvironmentAlerting.
func (mr *MockClientServiceMockRecorder) EnableEnvironmentAlerting(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableEnvironmentAlerting", reflect.TypeOf((*MockClientService)(nil).EnableEnvironmentAlerting), varargs...)
}

// GetApplicationEnvironmentDeployments mocks base method.
func (m *MockClientService) GetApplicationEnvironmentDeployments(params *environment.GetApplicationEnvironmentDeploymentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...environment.ClientOption) (*environment.GetApplicationEnvironmentDeploymentsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplicationEnvironmentDeployments", varargs...)
	ret0, _ := ret[0].(*environment.GetApplicationEnvironmentDeploymentsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationEnvironmentDeployments indicates an expected call of GetApplicationEnvironmentDeployments.
func (mr *MockClientServiceMockRecorder) GetApplicationEnvironmentDeployments(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationEnvironmentDeployments", reflect.TypeOf((*MockClientService)(nil).GetApplicationEnvironmentDeployments), varargs...)
}

// GetAzureKeyVaultSecretVersions mocks base method.
func (m *MockClientService) GetAzureKeyVaultSecretVersions(params *environment.GetAzureKeyVaultSecretVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...environment.ClientOption) (*environment.GetAzureKeyVaultSecretVersionsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAzureKeyVaultSecretVersions", varargs...)
	ret0, _ := ret[0].(*environment.GetAzureKeyVaultSecretVersionsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureKeyVaultSecretVersions indicates an expected call of GetAzureKeyVaultSecretVersions.
func (mr *MockClientServiceMockRecorder) GetAzureKeyVaultSecretVersions(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureKeyVaultSecretVersions", reflect.TypeOf((*MockClientService)(nil).GetAzureKeyVaultSecretVersions), varargs...)
}

// GetEnvironment mocks base method.
func (m *MockClientService) GetEnvironment(params *environment.GetEnvironmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...environment.ClientOption) (*environment.GetEnvironmentOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnvironment", varargs...)
	ret0, _ := ret[0].(*environment.GetEnvironmentOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment.
func (mr *MockClientServiceMockRecorder) GetEnvironment(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockClientService)(nil).GetEnvironment), varargs...)
}

// GetEnvironmentAlertingConfig mocks base method.
func (m *MockClientService) GetEnvironmentAlertingConfig(params *environment.GetEnvironmentAlertingConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...environment.ClientOption) (*environment.GetEnvironmentAlertingConfigOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnvironmentAlertingConfig", varargs...)
	ret0, _ := ret[0].(*environment.GetEnvironmentAlertingConfigOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentAlertingConfig indicates an expected call of GetEnvironmentAlertingConfig.
func (mr *MockClientServiceMockRecorder) GetEnvironmentAlertingConfig(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentAlertingConfig", reflect.TypeOf((*MockClientService)(nil).GetEnvironmentAlertingConfig), varargs...)
}

// GetEnvironmentEvents mocks base method.
func (m *MockClientService) GetEnvironmentEvents(params *environment.GetEnvironmentEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...environment.ClientOption) (*environment.GetEnvironmentEventsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnvironmentEvents", varargs...)
	ret0, _ := ret[0].(*environment.GetEnvironmentEventsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentEvents indicates an expected call of GetEnvironmentEvents.
func (mr *MockClientServiceMockRecorder) GetEnvironmentEvents(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentEvents", reflect.TypeOf((*MockClientService)(nil).GetEnvironmentEvents), varargs...)
}

// GetEnvironmentSummary mocks base method.
func (m *MockClientService) GetEnvironmentSummary(params *environment.GetEnvironmentSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...environment.ClientOption) (*environment.GetEnvironmentSummaryOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnvironmentSummary", varargs...)
	ret0, _ := ret[0].(*environment.GetEnvironmentSummaryOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentSummary indicates an expected call of GetEnvironmentSummary.
func (mr *MockClientServiceMockRecorder) GetEnvironmentSummary(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentSummary", reflect.TypeOf((*MockClientService)(nil).GetEnvironmentSummary), varargs...)
}

// RestartEnvironment mocks base method.
func (m *MockClientService) RestartEnvironment(params *environment.RestartEnvironmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...environment.ClientOption) (*environment.RestartEnvironmentOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestartEnvironment", varargs...)
	ret0, _ := ret[0].(*environment.RestartEnvironmentOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestartEnvironment indicates an expected call of RestartEnvironment.
func (mr *MockClientServiceMockRecorder) RestartEnvironment(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartEnvironment", reflect.TypeOf((*MockClientService)(nil).RestartEnvironment), varargs...)
}

// SetTransport mocks base method.
func (m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransport", transport)
}

// SetTransport indicates an expected call of SetTransport.
func (mr *MockClientServiceMockRecorder) SetTransport(transport interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransport", reflect.TypeOf((*MockClientService)(nil).SetTransport), transport)
}

// StartEnvironment mocks base method.
func (m *MockClientService) StartEnvironment(params *environment.StartEnvironmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...environment.ClientOption) (*environment.StartEnvironmentOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartEnvironment", varargs...)
	ret0, _ := ret[0].(*environment.StartEnvironmentOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartEnvironment indicates an expected call of StartEnvironment.
func (mr *MockClientServiceMockRecorder) StartEnvironment(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartEnvironment", reflect.TypeOf((*MockClientService)(nil).StartEnvironment), varargs...)
}

// StopEnvironment mocks base method.
func (m *MockClientService) StopEnvironment(params *environment.StopEnvironmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...environment.ClientOption) (*environment.StopEnvironmentOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopEnvironment", varargs...)
	ret0, _ := ret[0].(*environment.StopEnvironmentOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopEnvironment indicates an expected call of StopEnvironment.
func (mr *MockClientServiceMockRecorder) StopEnvironment(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopEnvironment", reflect.TypeOf((*MockClientService)(nil).StopEnvironment), varargs...)
}

// UpdateEnvironmentAlertingConfig mocks base method.
func (m *MockClientService) UpdateEnvironmentAlertingConfig(params *environment.UpdateEnvironmentAlertingConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...environment.ClientOption) (*environment.UpdateEnvironmentAlertingConfigOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEnvironmentAlertingConfig", varargs...)
	ret0, _ := ret[0].(*environment.UpdateEnvironmentAlertingConfigOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironmentAlertingConfig indicates an expected call of UpdateEnvironmentAlertingConfig.
func (mr *MockClientServiceMockRecorder) UpdateEnvironmentAlertingConfig(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentAlertingConfig", reflect.TypeOf((*MockClientService)(nil).UpdateEnvironmentAlertingConfig), varargs...)
}
