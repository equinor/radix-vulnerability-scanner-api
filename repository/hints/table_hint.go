package hints

import (
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	gormhints "gorm.io/hints"
)

type TableHint struct {
	Hints []string
}

func (tableHint TableHint) ModifyStatement(stmt *gorm.Statement) {
	for _, name := range []string{"FROM"} {
		clause := stmt.Clauses[name]

		if clause.AfterExpression == nil {
			clause.AfterExpression = tableHint
		} else {
			clause.AfterExpression = gormhints.Exprs{clause.AfterExpression, tableHint}
		}

		stmt.Clauses[name] = clause
	}
}

// nolint:errcheck Ignore errors here since Gorm dont care
func (indexHint TableHint) Build(builder clause.Builder) {
	if len(indexHint.Hints) > 0 {
		builder.WriteString("WITH")
		builder.WriteByte('(')
		for idx, key := range indexHint.Hints {
			if idx > 0 {
				builder.WriteByte(',')
			}
			builder.WriteString(key)
		}
		builder.WriteByte(')')
	}
}
