package repository

import (
	"context"
	"fmt"

	"github.com/equinor/radix-vulnerability-scanner-api/repository/models"
	"gorm.io/driver/sqlserver"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"
)

type gormRepository struct {
	db *gorm.DB
}

func GetSqlServerDsn(server, database, userID, password string, port int) string {
	dsn := fmt.Sprintf("server=%s;user id=%s;password=%s;database=%s",
		server, userID, password, database)

	if port > 0 {
		dsn = fmt.Sprintf("%s;port=%d", dsn, port)
	}

	return dsn
}

func OpenGormSqlServerDB(dsn string) (*gorm.DB, error) {
	return gorm.Open(sqlserver.Open(dsn), &gorm.Config{
		NamingStrategy:       schema.NamingStrategy{NoLowerCase: true},
		DisableAutomaticPing: true,
	})
}

func NewGormRepository(db *gorm.DB) Repository {
	return &gormRepository{db: db}
}

func (r *gormRepository) GetLastScan(ctx context.Context, images []string) ([]models.ImageDto, error) {
	var imgDto []models.ImageDto
	err := r.db.Connection(func(tx *gorm.DB) error {
		err := tx.
			WithContext(ctx).
			Where(clause.Eq{Column: "Name", Value: images}).
			Preload("Scans", lastImageScanPreload(images)).
			Preload("Scans.VulnerabilityAggregation").
			Find(&imgDto).Error
		if err != nil {
			return err
		}

		return nil
	})

	return imgDto, err
}

func lastImageScanPreload(images []string) func(*gorm.DB) *gorm.DB {
	return func(db *gorm.DB) *gorm.DB {
		return db.Raw(`
		SELECT s.* 
		FROM dbo.Image i 
		CROSS APPLY(SELECT TOP(1) t.* FROM dbo.ImageScan t WHERE t.ImageId=i.Id ORDER BY t.ScanTime) s 
		WHERE i.Name IN (?)`, images)
	}
}

func (r *gormRepository) GetLastSuccessfulScan(ctx context.Context, images []string) ([]models.ImageDto, error) {
	return nil, nil
}

func (r *gormRepository) GetLastVulnerabilitiesAggregated(ctx context.Context, images []string) ([]models.ImageDto, error) {
	return nil, nil
}

func (r *gormRepository) GetLastVulnerabilities(ctx context.Context, images []string) ([]models.ImageDto, error) {
	return nil, nil
}
