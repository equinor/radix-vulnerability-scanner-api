package repository

import (
	"context"
	"fmt"

	commongorm "github.com/equinor/radix-common/pkg/gorm"
	"github.com/equinor/radix-vulnerability-scanner-api/repository/hints"
	"github.com/equinor/radix-vulnerability-scanner-api/repository/models"
	"github.com/microsoft/go-mssqldb/azuread"
	"gorm.io/driver/sqlserver"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"
)

type gormRepository struct {
	db *gorm.DB
}

func GetFederatedSqlServerDsn(server, database string) string {
	return fmt.Sprintf("server=%s;database=%s;fedauth=ActiveDirectoryDefault", server, database)
}

func GetSqlServerDsn(server, database, userID, password string) string {
	dsn := fmt.Sprintf("server=%s;database=%s;user id=%s;password=%s", server, database, userID, password)
	return dsn
}

func OpenGormSqlServerDB(dsn string) (*gorm.DB, error) {
	dialector := sqlserver.New(sqlserver.Config{
		DriverName: azuread.DriverName,
		DSN:        dsn,
	})

	return gorm.Open(dialector, &gorm.Config{
		NamingStrategy:       schema.NamingStrategy{NoLowerCase: true},
		DisableAutomaticPing: false,
		Logger:               commongorm.NewLogger(),
	})
}

func NewGormRepository(db *gorm.DB) Interface {
	return &gormRepository{db: db}
}

func preloadLastImageScan(images []string) func(*gorm.DB) *gorm.DB {
	return func(db *gorm.DB) *gorm.DB {
		return db.Raw(`
		SELECT s.* 
		FROM dbo.Image i 
		CROSS APPLY(SELECT TOP(1) t.* FROM dbo.ImageScan t WHERE t.ImageId=i.Id ORDER BY t.ScanTime DESC) s 
		WHERE i.Name IN (?)`, images)
	}
}

func queryImagesByName(images []string) func(*gorm.DB) *gorm.DB {
	return func(tx *gorm.DB) *gorm.DB {
		return tx.Model(&models.ImageDto{}).Where(clause.Eq{Column: "Name", Value: images})
	}
}

func (r *gormRepository) GetLastImageScan(ctx context.Context, images []string, options GetLastImageScanOptions) ([]models.ImageDto, error) {
	var imgDto []models.ImageDto

	if len(images) == 0 {
		return imgDto, nil
	}

	err := r.db.Connection(func(tx *gorm.DB) error {
		tx = tx.WithContext(ctx)

		q := queryImagesByName(images)(tx).
			Preload("Scans", preloadLastImageScan(images))

		if options.IncludeVulnerabilities {
			q = q.Preload("Scans.Vulnerabilities")
			q = q.Preload("Scans.Vulnerabilities.References")
			q = q.Preload("Scans.Vulnerabilities.Identifiers")
		}

		if options.IncludeVulnerabilityAggregate {
			q = q.Preload("Scans.VulnerabilityAggregation", func(db *gorm.DB) *gorm.DB {
				return db.Clauses(hints.TableHint{Hints: []string{"NOEXPAND"}}).Table("dbo.ImageScanVulnerabilityAggregation")
			})
		}

		return q.Find(&imgDto).Error
	})
	if err != nil {
		return nil, err
	}

	return imgDto, err
}
