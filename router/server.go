package router

import (
	"fmt"
	"net/http"
	"os"
	"time"

	"github.com/equinor/radix-vulnerability-scanner-api/api"
	"github.com/equinor/radix-vulnerability-scanner-api/swaggerui"
	"github.com/gin-gonic/gin"

	_ "github.com/equinor/radix-vulnerability-scanner-api/swaggerui" // statik files
	"github.com/gin-contrib/cors"
)

const (
	radixDNSZoneEnvironmentVariable = "RADIX_DNS_ZONE"
	swaggerUIPath                   = "/swaggerui"
)

// NewServer Constructor function
func NewServer(clusterName, apiRootPath string, tokenValidator TokenValidator, controllers ...api.Controller) http.Handler {
	rootRouter := gin.Default()

	rootRouter.RemoveExtraSlash = true

	rootRouter.Use(corsMiddleware(clusterName))

	initializeSwaggerUI(rootRouter)

	v1Router := rootRouter.Group(apiRootPath)
	{
		v1Router.Use(BearerAuth(tokenValidator))
		initializeAPIServer(v1Router, controllers)
	}

	rootRouter.GET("/health", func(ctx *gin.Context) { ctx.Status(http.StatusOK) })

	return rootRouter
}

func corsMiddleware(clusterName string) gin.HandlerFunc {
	radixDNSZone := os.Getenv(radixDNSZoneEnvironmentVariable)

	return cors.New(cors.Config{
		AllowOrigins: []string{
			fmt.Sprintf("https://console.%s", radixDNSZone),
			getHostName("web", "radix-web-console-qa", clusterName, radixDNSZone),
			getHostName("web", "radix-web-console-prod", clusterName, radixDNSZone),
			// Due to active-cluster
			getActiveClusterHostName("web", "radix-web-console-qa", radixDNSZone),
			getActiveClusterHostName("web", "radix-web-console-prod", radixDNSZone),
		},
		AllowCredentials: true,
		MaxAge:           12 * time.Hour,
		AllowHeaders:     []string{"Accept", "Content-Type", "Content-Length", "Accept-Encoding", "X-CSRF-Token", "Authorization"},
		AllowMethods:     []string{"GET", "PUT", "POST", "OPTIONS", "DELETE", "PATCH", "HEAD"},
	})
}

func getActiveClusterHostName(componentName, namespace, radixDNSZone string) string {
	return fmt.Sprintf("https://%s-%s.%s", componentName, namespace, radixDNSZone)
}

func getHostName(componentName, namespace, clustername, radixDNSZone string) string {
	return fmt.Sprintf("https://%s-%s.%s.%s", componentName, namespace, clustername, radixDNSZone)
}

func initializeSwaggerUI(engine *gin.Engine) {
	swaggerFsHandler := http.FS(swaggerui.FS())
	engine.StaticFS(swaggerUIPath, swaggerFsHandler)
}

func initializeAPIServer(router gin.IRoutes, controllers []api.Controller) {

	for _, controller := range controllers {
		for _, route := range controller.GetRoutes() {
			addHandlerRoute(router, route)
		}
	}
}

func addHandlerRoute(router gin.IRoutes, route api.Route) {
	router.Handle(route.Method, route.Path, route.Handler)
}
