package router

import (
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/rs/xid"
	"github.com/rs/zerolog"
)

// Inspired by https://stackoverflow.com/a/50567022/2103434

type loggingResponseWriter struct {
	http.ResponseWriter
	statusCode int
}

func newLoggingResponseWriter(w http.ResponseWriter) *loggingResponseWriter {
	return &loggingResponseWriter{w, http.StatusOK}
}
func (lrw *loggingResponseWriter) WriteHeader(code int) {
	lrw.statusCode = code
	lrw.ResponseWriter.WriteHeader(code)
}

// NewZerologHandler injects and logs requests.
func NewZerologHandler(log zerolog.Logger) gin.HandlerFunc {
	return func(c *gin.Context) {
		logger := log.With().Logger()
		logger.UpdateContext(func(c zerolog.Context) zerolog.Context {
			return c.Str("trace-id", xid.New().String())
		})
		start := time.Now()

		c.Request = c.Request.WithContext(logger.WithContext(c.Request.Context()))
		c.Next()

		logger.Info().
			Str("user-agent", c.GetHeader("User-Agent")).
			Str("remote-addr", c.RemoteIP()).
			Str("request", c.Request.Method+" "+c.Request.URL.Path).
			Str("query", c.Request.URL.RawQuery).
			Dur("elapsed-ms", time.Since(start)).
			Int("status", c.Writer.Status()).
			Msg(http.StatusText(c.Writer.Status()))
	}
}
