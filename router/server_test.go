package router

import (
	"errors"
	"net/http"
	"net/http/httptest"
	"path"
	"testing"

	"github.com/equinor/radix-vulnerability-scanner-api/api"
	"github.com/equinor/radix-vulnerability-scanner-api/models"
	authprovidermock "github.com/equinor/radix-vulnerability-scanner-api/utils/auth/mock"
	"github.com/gin-gonic/gin"
	"github.com/golang/mock/gomock"
	"github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/suite"
)

func Test_RouterTestSuite(t *testing.T) {
	suite.Run(t, new(routerTestSuite))
}

type mockController struct {
	mock.Mock
}

func (m *mockController) GetRoutes() []api.Route {
	args := m.Called()
	return args.Get(0).([]api.Route)
}

func (m *mockController) HandleRequest(c *gin.Context) {
	u, _ := c.Get("user")
	m.Called(u)
}

type routerTestSuite struct {
	suite.Suite
	authProvider *authprovidermock.MockAuthProvider
	idToken      *authprovidermock.MockIDToken
}

func (s *routerTestSuite) SetupTest() {
	ctrl := gomock.NewController(s.T())
	s.authProvider = authprovidermock.NewMockAuthProvider(ctrl)
	s.idToken = authprovidermock.NewMockIDToken(ctrl)
}

func (s *routerTestSuite) Test_Server() {
	rootPath, resourcePath := "any/root", "resource/subresource"
	token := "anytoken"
	user := &models.User{RawToken: token, Identity: s.idToken}
	s.authProvider.EXPECT().VerifyToken(gomock.Any(), gomock.Any()).Return(s.idToken, nil)
	ctrl := &mockController{}
	ctrl.On("GetRoutes").Return([]api.Route{{Path: resourcePath, Method: "GET", Handler: ctrl.HandleRequest}})
	ctrl.On("HandleRequest", user)
	router := NewServer("anycluster", rootPath, s.authProvider, ctrl)

	req, _ := http.NewRequest("GET", path.Join(rootPath, resourcePath), nil)
	w := httptest.NewRecorder()
	req.Header["Authorization"] = []string{"Bearer " + token}
	router.ServeHTTP(w, req)
	s.Equal(http.StatusOK, w.Code)
	ctrl.AssertExpectations(s.T())
}

func (s *routerTestSuite) Test_Server_IncorrectVerb() {
	rootPath, resourcePath := "root", "path"
	ctrl := &mockController{}
	ctrl.On("GetRoutes").Return([]api.Route{{Path: resourcePath, Method: "GET", Handler: ctrl.HandleRequest}})
	router := NewServer("anycluster", rootPath, s.authProvider, ctrl)

	// Correct verb finds route - returns unauthorized (401) because header is missing
	req, _ := http.NewRequest("GET", path.Join(rootPath, resourcePath), nil)
	w := httptest.NewRecorder()
	router.ServeHTTP(w, req)
	s.Equal(http.StatusUnauthorized, w.Code)
	ctrl.AssertExpectations(s.T())

	// Incorrect verb returns 404
	req, _ = http.NewRequest("OPTION", path.Join(rootPath, resourcePath), nil)
	w = httptest.NewRecorder()
	router.ServeHTTP(w, req)
	s.Equal(http.StatusNotFound, w.Code)
	ctrl.AssertExpectations(s.T())
}

func (s *routerTestSuite) Test_Server_MissingAuthorizationHeader() {
	rootPath, resourcePath := "root", "path"
	ctrl := &mockController{}
	ctrl.On("GetRoutes").Return([]api.Route{{Path: resourcePath, Method: "GET"}})
	router := NewServer("anycluster", rootPath, s.authProvider, ctrl)

	req, _ := http.NewRequest("GET", path.Join(rootPath, resourcePath), nil)
	w := httptest.NewRecorder()
	router.ServeHTTP(w, req)
	s.Equal(http.StatusUnauthorized, w.Code)
	ctrl.AssertExpectations(s.T())
}

func (s *routerTestSuite) Test_Server_MissingBearerToken() {
	rootPath, resourcePath := "root", "path"
	ctrl := &mockController{}
	ctrl.On("GetRoutes").Return([]api.Route{{Path: resourcePath, Method: "GET"}})
	router := NewServer("anycluster", rootPath, s.authProvider, ctrl)

	req, _ := http.NewRequest("GET", path.Join(rootPath, resourcePath), nil)
	req.Header["Authorization"] = []string{"Bearer   "}
	w := httptest.NewRecorder()
	router.ServeHTTP(w, req)
	s.Equal(http.StatusUnauthorized, w.Code)
	ctrl.AssertExpectations(s.T())
}

func (s *routerTestSuite) Test_Server_InvalidToken() {
	rootPath, resourcePath := "root", "path"
	s.authProvider.EXPECT().VerifyToken(gomock.Any(), gomock.Any()).Return(nil, errors.New("any error"))
	ctrl := &mockController{}
	ctrl.On("GetRoutes").Return([]api.Route{{Path: resourcePath, Method: "GET"}})
	router := NewServer("anycluster", rootPath, s.authProvider, ctrl)

	req, _ := http.NewRequest("GET", path.Join(rootPath, resourcePath), nil)
	req.Header["Authorization"] = []string{"Bearer anytoken"}
	w := httptest.NewRecorder()
	router.ServeHTTP(w, req)
	s.Equal(http.StatusUnauthorized, w.Code)
	ctrl.AssertExpectations(s.T())
}
