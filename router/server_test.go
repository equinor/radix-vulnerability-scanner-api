package router

// import (
// 	"fmt"
// 	"net/http"
// 	"net/http/httptest"
// 	"path"
// 	"testing"

// 	"github.com/equinor/radix-vulnerability-scanner-api/api/vulnerability"
// 	handlerMock "github.com/equinor/radix-vulnerability-scanner-api/api/vulnerability/mock"
// 	"github.com/equinor/radix-vulnerability-scanner-api/models"
// 	"github.com/equinor/radix-vulnerability-scanner-api/router/mock"
// 	"github.com/golang/mock/gomock"
// 	"github.com/stretchr/testify/assert"
// )

// func Test_Vuln(t *testing.T) {
// 	appName, envName := "anyapp", "anyenv"
// 	originalToken, newToken := "anytoken", "newtoken"
// 	user := &models.User{RawToken: newToken}

// 	ctrl := gomock.NewController(t)
// 	handler := handlerMock.NewMockHandler(ctrl)
// 	handler.EXPECT().GetEnvironmentVulnerabilitySummary(gomock.Any(), user, appName, envName).Return(nil, nil)
// 	tokenValidator := mock.NewMockTokenValidator(ctrl)
// 	tokenValidator.EXPECT().ValidateToken(originalToken).Return(user, nil)
// 	vulnCtrl := vulnerability.NewController(handler)
// 	w := httptest.NewRecorder()
// 	sut := NewServer("anycluster", tokenValidator, vulnCtrl)
// 	req, _ := http.NewRequest("GET", path.Join(apiV1Path, fmt.Sprintf("applications/%s/environments/%s", appName, envName)), nil)
// 	req.Header["Authorization"] = []string{"Bearer " + originalToken}
// 	sut.ServeHTTP(w, req)

// 	assert.Equal(t, 200, w.Code)
// 	// assert.Equal(t, "pong", w.Body.String())

// }
