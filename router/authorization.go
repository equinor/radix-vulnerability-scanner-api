package router

import (
	"net/http"
	"strings"

	"github.com/equinor/radix-vulnerability-scanner-api/models"
	"github.com/gin-gonic/gin"
	"github.com/go-playground/validator/v10"
	"github.com/golang-jwt/jwt/v4"
)

type authHeader struct {
	Authorization string `header:"Authorization" binding:"required"`
}

type TokenValidator interface {
	ValidateToken(string) (*models.User, error)
}

type tokenValidator struct{}

func (*tokenValidator) ValidateToken(token string) (*models.User, error) {
	p := jwt.Parser{}
	identity := models.Identity{}
	_, _, err := p.ParseUnverified(token, &identity)
	if err != nil {
		return nil, err
	}

	user := models.User{
		RawToken: token,
		Identity: identity,
	}

	return &user, nil
}

func BearerAuth(tokenValidator TokenValidator) gin.HandlerFunc {
	return func(c *gin.Context) {
		h := authHeader{}

		if err := c.ShouldBindHeader(&h); err != nil {
			if _, ok := err.(validator.ValidationErrors); ok {
				c.Status(http.StatusUnauthorized)
				c.Abort()
				return
			}

			c.Status(http.StatusInternalServerError)
			c.Abort()
			return
		}

		bearerHeader := strings.Split(h.Authorization, "Bearer ")
		if len(bearerHeader) < 2 {
			c.Status(http.StatusBadRequest)
			c.Abort()
			return
		}
		token := bearerHeader[1]

		user, err := tokenValidator.ValidateToken(token)
		if err != nil {
			c.Status(http.StatusUnauthorized)
			c.Abort()
			return
		}

		c.Set("user", user)
	}
}
