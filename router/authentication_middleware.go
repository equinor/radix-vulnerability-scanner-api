package router

import (
	radixhttp "github.com/equinor/radix-common/net/http"
	apiErrors "github.com/equinor/radix-vulnerability-scanner-api/api/errors"
	"github.com/equinor/radix-vulnerability-scanner-api/models"
	"github.com/equinor/radix-vulnerability-scanner-api/utils/auth"
	"github.com/gin-gonic/gin"
	"github.com/rs/zerolog"
)

func NewAuthenticationMiddleware(authProvider auth.AuthProvider) gin.HandlerFunc {
	return func(c *gin.Context) {
		ctx := c.Request.Context()

		token, err := radixhttp.GetBearerTokenFromHeader(c.Request)

		if err != nil {
			zerolog.Ctx(ctx).Debug().Err(err).Msg("Could not get token from header")
			apiErrors.HandleErrorJSON(c, apiErrors.WrapError(err, apiErrors.ErrUnauthorized))
			return
		}

		verified, err := authProvider.VerifyToken(ctx, token)

		if err != nil || verified == nil {
			zerolog.Ctx(ctx).Debug().Err(err).Msg("Could not verify token")
			apiErrors.HandleErrorJSON(c, apiErrors.ErrUnauthorized)
			return
		}

		zerolog.Ctx(ctx).Debug().Msg("Authenticated")
		c.Set("user", &models.User{
			RawToken: token,
			Identity: verified,
		})
	}
}
